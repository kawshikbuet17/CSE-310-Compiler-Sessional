Line 1: type_specifier	: INT

int


Line 1: declaration_list : ID

a


Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int a ;



Line 1: unit : var_declaration

int a ;



Line 1: program : unit

int a ;



Line 3: type_specifier	: VOID

void

Line 4: type_specifier	: INT

int


Line 4: declaration_list : ID

b


Line 4: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 4: statement : var_declaration

int b ;


Line 4: statements : statement

int b ;


Line 5: variable : ID

a

Line 5: factor	: CONST_INT

11

Line 5: unary_expression : factor

11

Line 5: term :	unary_expression

11

Line 5: simple_expression : term

11

Line 5: rel_expression	: simple_expression

11

Line 5: logic_expression : rel_expression

11

Line 5: expression : variable ASSIGNOP logic_expression

a = 11

Line 5: expression_statement 	: expression SEMICOLON

a = 11;


Line 5: statement : expression_statement

a = 11;


Line 5: statements : statements statement

int b ;
 a = 11;


Line 6: variable : ID

b

Line 6: factor	: CONST_INT

22

Line 6: unary_expression : factor

22

Line 6: term :	unary_expression

22

Line 6: simple_expression : term

22

Line 6: rel_expression	: simple_expression

22

Line 6: logic_expression : rel_expression

22

Line 6: expression : variable ASSIGNOP logic_expression

b = 22

Line 6: expression_statement 	: expression SEMICOLON

b = 22;


Line 6: statement : expression_statement

b = 22;


Line 6: statements : statements statement

int b ;
 a = 11;
 b = 22;


Line 7: factor	: CONST_INT

5

Line 7: unary_expression : factor

5

Line 7: term :	unary_expression

5

Line 7: simple_expression : term

5

Line 7: rel_expression	: simple_expression

5

Line 7: factor	: CONST_INT

10

Line 7: unary_expression : factor

10

Line 7: term :	unary_expression

10

Line 7: simple_expression : term

10

Line 7: rel_expression	: simple_expression

10

Line 7: logic_expression : rel_expression LOGICOP rel_expression

5 && 10

MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:

Line 7: expression : logic expression

t1

Line 8: variable : ID

a

Line 8: factor	: CONST_INT

1

Line 8: unary_expression : factor

1

Line 8: term :	unary_expression

1

Line 8: simple_expression : term

1

Line 8: rel_expression	: simple_expression

1

Line 8: logic_expression : rel_expression

1

Line 8: expression : variable ASSIGNOP logic_expression

a = 1

Line 8: expression_statement 	: expression SEMICOLON

a = 1;


Line 8: statement : expression_statement

a = 1;


Line 8: statements : statement

a = 1;


Line 9: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 9: statements : statements statement

a = 1;
 println ( a ) ;


Line 10: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.1.1

ScopeTable # 1.1
8 -->  < b , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  

Line 10: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 11: factor	: CONST_INT

10

Line 11: unary_expression : factor

10

Line 11: term :	unary_expression

10

Line 11: simple_expression : term

10

Line 11: rel_expression	: simple_expression

10

Line 11: factor	: CONST_INT

0

Line 11: unary_expression : factor

0

Line 11: term :	unary_expression

0

Line 11: simple_expression : term

0

Line 11: rel_expression	: simple_expression

0

Line 11: logic_expression : rel_expression LOGICOP rel_expression

10 && 0

MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:

Line 11: expression : logic expression

t2

Line 12: variable : ID

b

Line 12: factor	: CONST_INT

2

Line 12: unary_expression : factor

2

Line 12: term :	unary_expression

2

Line 12: simple_expression : term

2

Line 12: rel_expression	: simple_expression

2

Line 12: logic_expression : rel_expression

2

Line 12: expression : variable ASSIGNOP logic_expression

b = 2

Line 12: expression_statement 	: expression SEMICOLON

b = 2;


Line 12: statement : expression_statement

b = 2;


Line 12: statements : statement

b = 2;


Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 13: statements : statements statement

b = 2;
 println ( b ) ;


Line 14: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.1.2

ScopeTable # 1.1
8 -->  < b , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  

Line 14: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 15: statement : IF LPAREN expression RPAREN statement

if ( t2 ) {
b = 2;
 println ( b ) ;
}


MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:

Line 15: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}


Line 15: statements : statements statement

int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}


Line 15: compound_statement : LCURL statements RCURL

{
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}


ScopeTable # 1.1
8 -->  < b , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  

Line 15: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}


Line 15: unit : func_definition

void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}


Line 15: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP

Line 17: type_specifier	: VOID

void

Line 18: type_specifier	: INT

int


Line 18: declaration_list : ID

b


Line 18: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 18: statement : var_declaration

int b ;


Line 18: statements : statement

int b ;


Line 19: type_specifier	: INT

int


Line 19: declaration_list : ID

c


Line 19: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 19: statement : var_declaration

int c ;


Line 19: statements : statements statement

int b ;
 int c ;


Line 20: variable : ID

a

Line 20: factor	: CONST_INT

11

Line 20: unary_expression : factor

11

Line 20: term :	unary_expression

11

Line 20: simple_expression : term

11

Line 20: rel_expression	: simple_expression

11

Line 20: logic_expression : rel_expression

11

Line 20: expression : variable ASSIGNOP logic_expression

a = 11

Line 20: expression_statement 	: expression SEMICOLON

a = 11;


Line 20: statement : expression_statement

a = 11;


Line 20: statements : statements statement

int b ;
 int c ;
 a = 11;


Line 21: variable : ID

b

Line 21: factor	: CONST_INT

22

Line 21: unary_expression : factor

22

Line 21: term :	unary_expression

22

Line 21: simple_expression : term

22

Line 21: rel_expression	: simple_expression

22

Line 21: logic_expression : rel_expression

22

Line 21: expression : variable ASSIGNOP logic_expression

b = 22

Line 21: expression_statement 	: expression SEMICOLON

b = 22;


Line 21: statement : expression_statement

b = 22;


Line 21: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;


Line 22: variable : ID

c

Line 22: factor	: CONST_INT

33

Line 22: unary_expression : factor

33

Line 22: term :	unary_expression

33

Line 22: simple_expression : term

33

Line 22: rel_expression	: simple_expression

33

Line 22: logic_expression : rel_expression

33

Line 22: expression : variable ASSIGNOP logic_expression

c = 33

Line 22: expression_statement 	: expression SEMICOLON

c = 33;


Line 22: statement : expression_statement

c = 33;


Line 22: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;


Line 23: variable : ID

a

Line 23: variable : ID

b

Line 23: factor	: variable

b

Line 23: unary_expression : factor

b

Line 23: term :	unary_expression

b

Line 23: simple_expression : term

b

Line 23: rel_expression	: simple_expression

b

Line 23: variable : ID

c

Line 23: factor	: variable

c

Line 23: unary_expression : factor

c

Line 23: term :	unary_expression

c

Line 23: simple_expression : term

c

Line 23: rel_expression	: simple_expression

c

Line 23: logic_expression : rel_expression LOGICOP rel_expression

b && c

MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:

Line 23: expression : variable ASSIGNOP logic_expression

a = t3

Line 23: expression_statement 	: expression SEMICOLON

a = t3;


Line 23: statement : expression_statement

a = t3;


Line 23: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;


Line 24: variable : ID

a

Line 24: factor	: variable

a

Line 24: unary_expression : factor

a

Line 24: term :	unary_expression

a

Line 24: simple_expression : term

a

Line 24: rel_expression	: simple_expression

a

Line 24: factor	: CONST_INT

0

Line 24: unary_expression : factor

0

Line 24: term :	unary_expression

0

Line 24: simple_expression : term

0

Line 24: rel_expression	: simple_expression

0

Line 24: logic_expression : rel_expression LOGICOP rel_expression

a && 0

MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:

Line 24: expression : logic expression

t4

Line 25: variable : ID

a

Line 25: factor	: CONST_INT

1

Line 25: unary_expression : factor

1

Line 25: term :	unary_expression

1

Line 25: simple_expression : term

1

Line 25: rel_expression	: simple_expression

1

Line 25: logic_expression : rel_expression

1

Line 25: expression : variable ASSIGNOP logic_expression

a = 1

Line 25: expression_statement 	: expression SEMICOLON

a = 1;


Line 25: statement : expression_statement

a = 1;


Line 25: statements : statement

a = 1;


Line 26: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 26: statements : statements statement

a = 1;
 println ( a ) ;


Line 27: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.2.1

ScopeTable # 1.2
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  

Line 27: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 28: factor	: CONST_INT

10

Line 28: unary_expression : factor

10

Line 28: term :	unary_expression

10

Line 28: simple_expression : term

10

Line 28: rel_expression	: simple_expression

10

Line 28: variable : ID

a

Line 28: factor	: variable

a

Line 28: unary_expression : factor

a

Line 28: term :	unary_expression

a

Line 28: simple_expression : term

a

Line 28: rel_expression	: simple_expression

a

Line 28: logic_expression : rel_expression LOGICOP rel_expression

10 && a

MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:

Line 28: expression : logic expression

t5

Line 29: variable : ID

b

Line 29: factor	: CONST_INT

2

Line 29: unary_expression : factor

2

Line 29: term :	unary_expression

2

Line 29: simple_expression : term

2

Line 29: rel_expression	: simple_expression

2

Line 29: logic_expression : rel_expression

2

Line 29: expression : variable ASSIGNOP logic_expression

b = 2

Line 29: expression_statement 	: expression SEMICOLON

b = 2;


Line 29: statement : expression_statement

b = 2;


Line 29: statements : statement

b = 2;


Line 30: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 30: statements : statements statement

b = 2;
 println ( b ) ;


Line 31: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.2.2

ScopeTable # 1.2
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  

Line 31: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 33: variable : ID

c

Line 33: factor	: CONST_INT

3

Line 33: unary_expression : factor

3

Line 33: term :	unary_expression

3

Line 33: simple_expression : term

3

Line 33: rel_expression	: simple_expression

3

Line 33: logic_expression : rel_expression

3

Line 33: expression : variable ASSIGNOP logic_expression

c = 3

Line 33: expression_statement 	: expression SEMICOLON

c = 3;


Line 33: statement : expression_statement

c = 3;


Line 33: statements : statement

c = 3;


Line 34: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 34: statements : statements statement

c = 3;
 println ( c ) ;


Line 35: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.2.3

ScopeTable # 1.2
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  

Line 35: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 35: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 35: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 35: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 36: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.2
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  

Line 36: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 36: unit : func_definition

void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 36: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP

Line 38: type_specifier	: VOID

void

Line 39: type_specifier	: INT

int


Line 39: declaration_list : ID

b


Line 39: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 39: statement : var_declaration

int b ;


Line 39: statements : statement

int b ;


Line 40: type_specifier	: INT

int


Line 40: declaration_list : ID

c


Line 40: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 40: statement : var_declaration

int c ;


Line 40: statements : statements statement

int b ;
 int c ;


Line 41: variable : ID

a

Line 41: factor	: CONST_INT

11

Line 41: unary_expression : factor

11

Line 41: term :	unary_expression

11

Line 41: simple_expression : term

11

Line 41: rel_expression	: simple_expression

11

Line 41: logic_expression : rel_expression

11

Line 41: expression : variable ASSIGNOP logic_expression

a = 11

Line 41: expression_statement 	: expression SEMICOLON

a = 11;


Line 41: statement : expression_statement

a = 11;


Line 41: statements : statements statement

int b ;
 int c ;
 a = 11;


Line 42: variable : ID

b

Line 42: factor	: CONST_INT

22

Line 42: unary_expression : factor

22

Line 42: term :	unary_expression

22

Line 42: simple_expression : term

22

Line 42: rel_expression	: simple_expression

22

Line 42: logic_expression : rel_expression

22

Line 42: expression : variable ASSIGNOP logic_expression

b = 22

Line 42: expression_statement 	: expression SEMICOLON

b = 22;


Line 42: statement : expression_statement

b = 22;


Line 42: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;


Line 43: variable : ID

c

Line 43: factor	: CONST_INT

33

Line 43: unary_expression : factor

33

Line 43: term :	unary_expression

33

Line 43: simple_expression : term

33

Line 43: rel_expression	: simple_expression

33

Line 43: logic_expression : rel_expression

33

Line 43: expression : variable ASSIGNOP logic_expression

c = 33

Line 43: expression_statement 	: expression SEMICOLON

c = 33;


Line 43: statement : expression_statement

c = 33;


Line 43: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;


Line 44: factor	: CONST_INT

0

Line 44: unary_expression : factor

0

Line 44: term :	unary_expression

0

Line 44: simple_expression : term

0

Line 44: rel_expression	: simple_expression

0

Line 44: factor	: CONST_INT

1

Line 44: unary_expression : factor

1

Line 44: term :	unary_expression

1

Line 44: simple_expression : term

1

Line 44: rel_expression	: simple_expression

1

Line 44: logic_expression : rel_expression LOGICOP rel_expression

0 && 1

MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:

Line 44: expression : logic expression

t6

Line 45: variable : ID

a

Line 45: factor	: CONST_INT

1

Line 45: unary_expression : factor

1

Line 45: term :	unary_expression

1

Line 45: simple_expression : term

1

Line 45: rel_expression	: simple_expression

1

Line 45: logic_expression : rel_expression

1

Line 45: expression : variable ASSIGNOP logic_expression

a = 1

Line 45: expression_statement 	: expression SEMICOLON

a = 1;


Line 45: statement : expression_statement

a = 1;


Line 45: statements : statement

a = 1;


Line 46: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 46: statements : statements statement

a = 1;
 println ( a ) ;


Line 47: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.3.1

ScopeTable # 1.3
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  

Line 47: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 48: factor	: CONST_INT

10

Line 48: unary_expression : factor

10

Line 48: term :	unary_expression

10

Line 48: simple_expression : term

10

Line 48: rel_expression	: simple_expression

10

Line 48: factor	: CONST_INT

10

Line 48: unary_expression : factor

10

Line 48: term :	unary_expression

10

Line 48: simple_expression : term

10

Line 48: rel_expression	: simple_expression

10

Line 48: logic_expression : rel_expression LOGICOP rel_expression

10 && 10

MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:

Line 48: expression : logic expression

t7

Line 49: variable : ID

b

Line 49: factor	: CONST_INT

2

Line 49: unary_expression : factor

2

Line 49: term :	unary_expression

2

Line 49: simple_expression : term

2

Line 49: rel_expression	: simple_expression

2

Line 49: logic_expression : rel_expression

2

Line 49: expression : variable ASSIGNOP logic_expression

b = 2

Line 49: expression_statement 	: expression SEMICOLON

b = 2;


Line 49: statement : expression_statement

b = 2;


Line 49: statements : statement

b = 2;


Line 50: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 50: statements : statements statement

b = 2;
 println ( b ) ;


Line 51: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.3.2

ScopeTable # 1.3
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  

Line 51: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 53: variable : ID

c

Line 53: factor	: CONST_INT

3

Line 53: unary_expression : factor

3

Line 53: term :	unary_expression

3

Line 53: simple_expression : term

3

Line 53: rel_expression	: simple_expression

3

Line 53: logic_expression : rel_expression

3

Line 53: expression : variable ASSIGNOP logic_expression

c = 3

Line 53: expression_statement 	: expression SEMICOLON

c = 3;


Line 53: statement : expression_statement

c = 3;


Line 53: statements : statement

c = 3;


Line 54: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 54: statements : statements statement

c = 3;
 println ( c ) ;


Line 55: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.3.3

ScopeTable # 1.3
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  

Line 55: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 55: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 55: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 55: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 56: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.3
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  

Line 56: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 56: unit : func_definition

void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 56: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP

Line 58: type_specifier	: VOID

void

Line 59: type_specifier	: INT

int


Line 59: declaration_list : ID

b


Line 59: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 59: statement : var_declaration

int b ;


Line 59: statements : statement

int b ;


Line 60: type_specifier	: INT

int


Line 60: declaration_list : ID

c


Line 60: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 60: statement : var_declaration

int c ;


Line 60: statements : statements statement

int b ;
 int c ;


Line 61: variable : ID

a

Line 61: factor	: CONST_INT

0

Line 61: unary_expression : factor

0

Line 61: term :	unary_expression

0

Line 61: simple_expression : term

0

Line 61: rel_expression	: simple_expression

0

Line 61: logic_expression : rel_expression

0

Line 61: expression : variable ASSIGNOP logic_expression

a = 0

Line 61: expression_statement 	: expression SEMICOLON

a = 0;


Line 61: statement : expression_statement

a = 0;


Line 61: statements : statements statement

int b ;
 int c ;
 a = 0;


Line 62: variable : ID

b

Line 62: factor	: CONST_INT

22

Line 62: unary_expression : factor

22

Line 62: term :	unary_expression

22

Line 62: simple_expression : term

22

Line 62: rel_expression	: simple_expression

22

Line 62: logic_expression : rel_expression

22

Line 62: expression : variable ASSIGNOP logic_expression

b = 22

Line 62: expression_statement 	: expression SEMICOLON

b = 22;


Line 62: statement : expression_statement

b = 22;


Line 62: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 22;


Line 63: variable : ID

c

Line 63: factor	: CONST_INT

33

Line 63: unary_expression : factor

33

Line 63: term :	unary_expression

33

Line 63: simple_expression : term

33

Line 63: rel_expression	: simple_expression

33

Line 63: logic_expression : rel_expression

33

Line 63: expression : variable ASSIGNOP logic_expression

c = 33

Line 63: expression_statement 	: expression SEMICOLON

c = 33;


Line 63: statement : expression_statement

c = 33;


Line 63: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;


Line 64: variable : ID

a

Line 64: factor	: variable

a

Line 64: unary_expression : factor

a

Line 64: term :	unary_expression

a

Line 64: simple_expression : term

a

Line 64: rel_expression	: simple_expression

a

Line 64: factor	: CONST_INT

1

Line 64: unary_expression : factor

1

Line 64: term :	unary_expression

1

Line 64: simple_expression : term

1

Line 64: rel_expression	: simple_expression

1

Line 64: logic_expression : rel_expression LOGICOP rel_expression

a && 1

MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:

Line 64: expression : logic expression

t8

Line 65: variable : ID

a

Line 65: factor	: CONST_INT

1

Line 65: unary_expression : factor

1

Line 65: term :	unary_expression

1

Line 65: simple_expression : term

1

Line 65: rel_expression	: simple_expression

1

Line 65: logic_expression : rel_expression

1

Line 65: expression : variable ASSIGNOP logic_expression

a = 1

Line 65: expression_statement 	: expression SEMICOLON

a = 1;


Line 65: statement : expression_statement

a = 1;


Line 65: statements : statement

a = 1;


Line 66: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 66: statements : statements statement

a = 1;
 println ( a ) ;


Line 67: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.4.1

ScopeTable # 1.4
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  

Line 67: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 68: variable : ID

b

Line 68: factor	: variable

b

Line 68: unary_expression : factor

b

Line 68: term :	unary_expression

b

Line 68: simple_expression : term

b

Line 68: rel_expression	: simple_expression

b

Line 68: factor	: CONST_INT

0

Line 68: unary_expression : factor

0

Line 68: term :	unary_expression

0

Line 68: simple_expression : term

0

Line 68: rel_expression	: simple_expression

0

Line 68: logic_expression : rel_expression LOGICOP rel_expression

b && 0

MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:

Line 68: expression : logic expression

t9

Line 69: variable : ID

b

Line 69: factor	: CONST_INT

2

Line 69: unary_expression : factor

2

Line 69: term :	unary_expression

2

Line 69: simple_expression : term

2

Line 69: rel_expression	: simple_expression

2

Line 69: logic_expression : rel_expression

2

Line 69: expression : variable ASSIGNOP logic_expression

b = 2

Line 69: expression_statement 	: expression SEMICOLON

b = 2;


Line 69: statement : expression_statement

b = 2;


Line 69: statements : statement

b = 2;


Line 70: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 70: statements : statements statement

b = 2;
 println ( b ) ;


Line 71: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.4.2

ScopeTable # 1.4
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  

Line 71: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 73: variable : ID

c

Line 73: factor	: CONST_INT

3

Line 73: unary_expression : factor

3

Line 73: term :	unary_expression

3

Line 73: simple_expression : term

3

Line 73: rel_expression	: simple_expression

3

Line 73: logic_expression : rel_expression

3

Line 73: expression : variable ASSIGNOP logic_expression

c = 3

Line 73: expression_statement 	: expression SEMICOLON

c = 3;


Line 73: statement : expression_statement

c = 3;


Line 73: statements : statement

c = 3;


Line 74: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 74: statements : statements statement

c = 3;
 println ( c ) ;


Line 75: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.4.3

ScopeTable # 1.4
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  

Line 75: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 75: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 75: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 75: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 76: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.4
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  

Line 76: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 76: unit : func_definition

void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 76: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP

Line 78: type_specifier	: VOID

void

Line 79: type_specifier	: INT

int


Line 79: declaration_list : ID

b


Line 79: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 79: statement : var_declaration

int b ;


Line 79: statements : statement

int b ;


Line 80: type_specifier	: INT

int


Line 80: declaration_list : ID

c


Line 80: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 80: statement : var_declaration

int c ;


Line 80: statements : statements statement

int b ;
 int c ;


Line 81: variable : ID

a

Line 81: factor	: CONST_INT

0

Line 81: unary_expression : factor

0

Line 81: term :	unary_expression

0

Line 81: simple_expression : term

0

Line 81: rel_expression	: simple_expression

0

Line 81: logic_expression : rel_expression

0

Line 81: expression : variable ASSIGNOP logic_expression

a = 0

Line 81: expression_statement 	: expression SEMICOLON

a = 0;


Line 81: statement : expression_statement

a = 0;


Line 81: statements : statements statement

int b ;
 int c ;
 a = 0;


Line 82: variable : ID

b

Line 82: factor	: CONST_INT

0

Line 82: unary_expression : factor

0

Line 82: term :	unary_expression

0

Line 82: simple_expression : term

0

Line 82: rel_expression	: simple_expression

0

Line 82: logic_expression : rel_expression

0

Line 82: expression : variable ASSIGNOP logic_expression

b = 0

Line 82: expression_statement 	: expression SEMICOLON

b = 0;


Line 82: statement : expression_statement

b = 0;


Line 82: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;


Line 83: variable : ID

c

Line 83: factor	: CONST_INT

33

Line 83: unary_expression : factor

33

Line 83: term :	unary_expression

33

Line 83: simple_expression : term

33

Line 83: rel_expression	: simple_expression

33

Line 83: logic_expression : rel_expression

33

Line 83: expression : variable ASSIGNOP logic_expression

c = 33

Line 83: expression_statement 	: expression SEMICOLON

c = 33;


Line 83: statement : expression_statement

c = 33;


Line 83: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;


Line 84: variable : ID

a

Line 84: factor	: variable

a

Line 84: unary_expression : factor

a

Line 84: term :	unary_expression

a

Line 84: simple_expression : term

a

Line 84: rel_expression	: simple_expression

a

Line 84: factor	: CONST_INT

1

Line 84: unary_expression : factor

1

Line 84: term :	unary_expression

1

Line 84: simple_expression : term

1

Line 84: rel_expression	: simple_expression

1

Line 84: logic_expression : rel_expression LOGICOP rel_expression

a && 1

MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:

Line 84: expression : logic expression

t10

Line 85: variable : ID

a

Line 85: factor	: CONST_INT

1

Line 85: unary_expression : factor

1

Line 85: term :	unary_expression

1

Line 85: simple_expression : term

1

Line 85: rel_expression	: simple_expression

1

Line 85: logic_expression : rel_expression

1

Line 85: expression : variable ASSIGNOP logic_expression

a = 1

Line 85: expression_statement 	: expression SEMICOLON

a = 1;


Line 85: statement : expression_statement

a = 1;


Line 85: statements : statement

a = 1;


Line 86: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 86: statements : statements statement

a = 1;
 println ( a ) ;


Line 87: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.5.1

ScopeTable # 1.5
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  

Line 87: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 88: variable : ID

b

Line 88: factor	: variable

b

Line 88: unary_expression : factor

b

Line 88: term :	unary_expression

b

Line 88: simple_expression : term

b

Line 88: rel_expression	: simple_expression

b

Line 88: factor	: CONST_INT

10

Line 88: unary_expression : factor

10

Line 88: term :	unary_expression

10

Line 88: simple_expression : term

10

Line 88: rel_expression	: simple_expression

10

Line 88: logic_expression : rel_expression LOGICOP rel_expression

b && 10

MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:

Line 88: expression : logic expression

t11

Line 89: variable : ID

b

Line 89: factor	: CONST_INT

2

Line 89: unary_expression : factor

2

Line 89: term :	unary_expression

2

Line 89: simple_expression : term

2

Line 89: rel_expression	: simple_expression

2

Line 89: logic_expression : rel_expression

2

Line 89: expression : variable ASSIGNOP logic_expression

b = 2

Line 89: expression_statement 	: expression SEMICOLON

b = 2;


Line 89: statement : expression_statement

b = 2;


Line 89: statements : statement

b = 2;


Line 90: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 90: statements : statements statement

b = 2;
 println ( b ) ;


Line 91: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.5.2

ScopeTable # 1.5
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  

Line 91: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 93: variable : ID

c

Line 93: factor	: CONST_INT

3

Line 93: unary_expression : factor

3

Line 93: term :	unary_expression

3

Line 93: simple_expression : term

3

Line 93: rel_expression	: simple_expression

3

Line 93: logic_expression : rel_expression

3

Line 93: expression : variable ASSIGNOP logic_expression

c = 3

Line 93: expression_statement 	: expression SEMICOLON

c = 3;


Line 93: statement : expression_statement

c = 3;


Line 93: statements : statement

c = 3;


Line 94: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 94: statements : statements statement

c = 3;
 println ( c ) ;


Line 95: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.5.3

ScopeTable # 1.5
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  

Line 95: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 95: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 95: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 95: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 96: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.5
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  

Line 96: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 96: unit : func_definition

void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 96: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP

Line 98: type_specifier	: VOID

void

Line 99: type_specifier	: INT

int


Line 99: declaration_list : ID

b


Line 99: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 99: statement : var_declaration

int b ;


Line 99: statements : statement

int b ;


Line 100: variable : ID

a

Line 100: factor	: CONST_INT

11

Line 100: unary_expression : factor

11

Line 100: term :	unary_expression

11

Line 100: simple_expression : term

11

Line 100: rel_expression	: simple_expression

11

Line 100: logic_expression : rel_expression

11

Line 100: expression : variable ASSIGNOP logic_expression

a = 11

Line 100: expression_statement 	: expression SEMICOLON

a = 11;


Line 100: statement : expression_statement

a = 11;


Line 100: statements : statements statement

int b ;
 a = 11;


Line 101: variable : ID

b

Line 101: factor	: CONST_INT

22

Line 101: unary_expression : factor

22

Line 101: term :	unary_expression

22

Line 101: simple_expression : term

22

Line 101: rel_expression	: simple_expression

22

Line 101: logic_expression : rel_expression

22

Line 101: expression : variable ASSIGNOP logic_expression

b = 22

Line 101: expression_statement 	: expression SEMICOLON

b = 22;


Line 101: statement : expression_statement

b = 22;


Line 101: statements : statements statement

int b ;
 a = 11;
 b = 22;


Line 102: factor	: CONST_INT

5

Line 102: unary_expression : factor

5

Line 102: term :	unary_expression

5

Line 102: simple_expression : term

5

Line 102: rel_expression	: simple_expression

5

Line 102: factor	: CONST_INT

10

Line 102: unary_expression : factor

10

Line 102: term :	unary_expression

10

Line 102: simple_expression : term

10

Line 102: rel_expression	: simple_expression

10

Line 102: logic_expression : rel_expression LOGICOP rel_expression

5 || 10

MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:

Line 102: expression : logic expression

t12

Line 103: variable : ID

a

Line 103: factor	: CONST_INT

1

Line 103: unary_expression : factor

1

Line 103: term :	unary_expression

1

Line 103: simple_expression : term

1

Line 103: rel_expression	: simple_expression

1

Line 103: logic_expression : rel_expression

1

Line 103: expression : variable ASSIGNOP logic_expression

a = 1

Line 103: expression_statement 	: expression SEMICOLON

a = 1;


Line 103: statement : expression_statement

a = 1;


Line 103: statements : statement

a = 1;


Line 104: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 104: statements : statements statement

a = 1;
 println ( a ) ;


Line 105: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.6.1

ScopeTable # 1.6
8 -->  < b , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  

Line 105: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 106: factor	: CONST_INT

10

Line 106: unary_expression : factor

10

Line 106: term :	unary_expression

10

Line 106: simple_expression : term

10

Line 106: rel_expression	: simple_expression

10

Line 106: factor	: CONST_INT

0

Line 106: unary_expression : factor

0

Line 106: term :	unary_expression

0

Line 106: simple_expression : term

0

Line 106: rel_expression	: simple_expression

0

Line 106: logic_expression : rel_expression LOGICOP rel_expression

10 || 0

MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:

Line 106: expression : logic expression

t13

Line 107: variable : ID

b

Line 107: factor	: CONST_INT

2

Line 107: unary_expression : factor

2

Line 107: term :	unary_expression

2

Line 107: simple_expression : term

2

Line 107: rel_expression	: simple_expression

2

Line 107: logic_expression : rel_expression

2

Line 107: expression : variable ASSIGNOP logic_expression

b = 2

Line 107: expression_statement 	: expression SEMICOLON

b = 2;


Line 107: statement : expression_statement

b = 2;


Line 107: statements : statement

b = 2;


Line 108: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 108: statements : statements statement

b = 2;
 println ( b ) ;


Line 109: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.6.2

ScopeTable # 1.6
8 -->  < b , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  

Line 109: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 110: statement : IF LPAREN expression RPAREN statement

if ( t13 ) {
b = 2;
 println ( b ) ;
}


MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:

Line 110: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}


Line 110: statements : statements statement

int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}


Line 110: compound_statement : LCURL statements RCURL

{
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}


ScopeTable # 1.6
8 -->  < b , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  

Line 110: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}


Line 110: unit : func_definition

void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}


Line 110: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP

Line 112: type_specifier	: VOID

void

Line 113: type_specifier	: INT

int


Line 113: declaration_list : ID

b


Line 113: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 113: statement : var_declaration

int b ;


Line 113: statements : statement

int b ;


Line 114: type_specifier	: INT

int


Line 114: declaration_list : ID

c


Line 114: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 114: statement : var_declaration

int c ;


Line 114: statements : statements statement

int b ;
 int c ;


Line 115: variable : ID

a

Line 115: factor	: CONST_INT

11

Line 115: unary_expression : factor

11

Line 115: term :	unary_expression

11

Line 115: simple_expression : term

11

Line 115: rel_expression	: simple_expression

11

Line 115: logic_expression : rel_expression

11

Line 115: expression : variable ASSIGNOP logic_expression

a = 11

Line 115: expression_statement 	: expression SEMICOLON

a = 11;


Line 115: statement : expression_statement

a = 11;


Line 115: statements : statements statement

int b ;
 int c ;
 a = 11;


Line 116: variable : ID

b

Line 116: factor	: CONST_INT

22

Line 116: unary_expression : factor

22

Line 116: term :	unary_expression

22

Line 116: simple_expression : term

22

Line 116: rel_expression	: simple_expression

22

Line 116: logic_expression : rel_expression

22

Line 116: expression : variable ASSIGNOP logic_expression

b = 22

Line 116: expression_statement 	: expression SEMICOLON

b = 22;


Line 116: statement : expression_statement

b = 22;


Line 116: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;


Line 117: variable : ID

c

Line 117: factor	: CONST_INT

33

Line 117: unary_expression : factor

33

Line 117: term :	unary_expression

33

Line 117: simple_expression : term

33

Line 117: rel_expression	: simple_expression

33

Line 117: logic_expression : rel_expression

33

Line 117: expression : variable ASSIGNOP logic_expression

c = 33

Line 117: expression_statement 	: expression SEMICOLON

c = 33;


Line 117: statement : expression_statement

c = 33;


Line 117: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;


Line 118: variable : ID

a

Line 118: factor	: variable

a

Line 118: unary_expression : factor

a

Line 118: term :	unary_expression

a

Line 118: simple_expression : term

a

Line 118: rel_expression	: simple_expression

a

Line 118: factor	: CONST_INT

0

Line 118: unary_expression : factor

0

Line 118: term :	unary_expression

0

Line 118: simple_expression : term

0

Line 118: rel_expression	: simple_expression

0

Line 118: logic_expression : rel_expression LOGICOP rel_expression

a || 0

MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:

Line 118: expression : logic expression

t14

Line 119: variable : ID

a

Line 119: factor	: CONST_INT

1

Line 119: unary_expression : factor

1

Line 119: term :	unary_expression

1

Line 119: simple_expression : term

1

Line 119: rel_expression	: simple_expression

1

Line 119: logic_expression : rel_expression

1

Line 119: expression : variable ASSIGNOP logic_expression

a = 1

Line 119: expression_statement 	: expression SEMICOLON

a = 1;


Line 119: statement : expression_statement

a = 1;


Line 119: statements : statement

a = 1;


Line 120: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 120: statements : statements statement

a = 1;
 println ( a ) ;


Line 121: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.7.1

ScopeTable # 1.7
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 121: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 122: factor	: CONST_INT

10

Line 122: unary_expression : factor

10

Line 122: term :	unary_expression

10

Line 122: simple_expression : term

10

Line 122: rel_expression	: simple_expression

10

Line 122: variable : ID

a

Line 122: factor	: variable

a

Line 122: unary_expression : factor

a

Line 122: term :	unary_expression

a

Line 122: simple_expression : term

a

Line 122: rel_expression	: simple_expression

a

Line 122: logic_expression : rel_expression LOGICOP rel_expression

10 || a

MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:

Line 122: expression : logic expression

t15

Line 123: variable : ID

b

Line 123: factor	: CONST_INT

2

Line 123: unary_expression : factor

2

Line 123: term :	unary_expression

2

Line 123: simple_expression : term

2

Line 123: rel_expression	: simple_expression

2

Line 123: logic_expression : rel_expression

2

Line 123: expression : variable ASSIGNOP logic_expression

b = 2

Line 123: expression_statement 	: expression SEMICOLON

b = 2;


Line 123: statement : expression_statement

b = 2;


Line 123: statements : statement

b = 2;


Line 124: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 124: statements : statements statement

b = 2;
 println ( b ) ;


Line 125: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.7.2

ScopeTable # 1.7
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 125: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 127: variable : ID

c

Line 127: factor	: CONST_INT

3

Line 127: unary_expression : factor

3

Line 127: term :	unary_expression

3

Line 127: simple_expression : term

3

Line 127: rel_expression	: simple_expression

3

Line 127: logic_expression : rel_expression

3

Line 127: expression : variable ASSIGNOP logic_expression

c = 3

Line 127: expression_statement 	: expression SEMICOLON

c = 3;


Line 127: statement : expression_statement

c = 3;


Line 127: statements : statement

c = 3;


Line 128: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 128: statements : statements statement

c = 3;
 println ( c ) ;


Line 129: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.7.3

ScopeTable # 1.7
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 129: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 129: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 129: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 129: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 130: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.7
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 130: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 130: unit : func_definition

void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 130: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP

Line 132: type_specifier	: VOID

void

Line 133: type_specifier	: INT

int


Line 133: declaration_list : ID

b


Line 133: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 133: statement : var_declaration

int b ;


Line 133: statements : statement

int b ;


Line 134: type_specifier	: INT

int


Line 134: declaration_list : ID

c


Line 134: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 134: statement : var_declaration

int c ;


Line 134: statements : statements statement

int b ;
 int c ;


Line 135: variable : ID

a

Line 135: factor	: CONST_INT

11

Line 135: unary_expression : factor

11

Line 135: term :	unary_expression

11

Line 135: simple_expression : term

11

Line 135: rel_expression	: simple_expression

11

Line 135: logic_expression : rel_expression

11

Line 135: expression : variable ASSIGNOP logic_expression

a = 11

Line 135: expression_statement 	: expression SEMICOLON

a = 11;


Line 135: statement : expression_statement

a = 11;


Line 135: statements : statements statement

int b ;
 int c ;
 a = 11;


Line 136: variable : ID

b

Line 136: factor	: CONST_INT

22

Line 136: unary_expression : factor

22

Line 136: term :	unary_expression

22

Line 136: simple_expression : term

22

Line 136: rel_expression	: simple_expression

22

Line 136: logic_expression : rel_expression

22

Line 136: expression : variable ASSIGNOP logic_expression

b = 22

Line 136: expression_statement 	: expression SEMICOLON

b = 22;


Line 136: statement : expression_statement

b = 22;


Line 136: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;


Line 137: variable : ID

c

Line 137: factor	: CONST_INT

33

Line 137: unary_expression : factor

33

Line 137: term :	unary_expression

33

Line 137: simple_expression : term

33

Line 137: rel_expression	: simple_expression

33

Line 137: logic_expression : rel_expression

33

Line 137: expression : variable ASSIGNOP logic_expression

c = 33

Line 137: expression_statement 	: expression SEMICOLON

c = 33;


Line 137: statement : expression_statement

c = 33;


Line 137: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;


Line 138: factor	: CONST_INT

0

Line 138: unary_expression : factor

0

Line 138: term :	unary_expression

0

Line 138: simple_expression : term

0

Line 138: rel_expression	: simple_expression

0

Line 138: factor	: CONST_INT

0

Line 138: unary_expression : factor

0

Line 138: term :	unary_expression

0

Line 138: simple_expression : term

0

Line 138: rel_expression	: simple_expression

0

Line 138: logic_expression : rel_expression LOGICOP rel_expression

0 || 0

MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:

Line 138: expression : logic expression

t16

Line 139: variable : ID

a

Line 139: factor	: CONST_INT

1

Line 139: unary_expression : factor

1

Line 139: term :	unary_expression

1

Line 139: simple_expression : term

1

Line 139: rel_expression	: simple_expression

1

Line 139: logic_expression : rel_expression

1

Line 139: expression : variable ASSIGNOP logic_expression

a = 1

Line 139: expression_statement 	: expression SEMICOLON

a = 1;


Line 139: statement : expression_statement

a = 1;


Line 139: statements : statement

a = 1;


Line 140: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 140: statements : statements statement

a = 1;
 println ( a ) ;


Line 141: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.8.1

ScopeTable # 1.8
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 141: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 142: factor	: CONST_INT

10

Line 142: unary_expression : factor

10

Line 142: term :	unary_expression

10

Line 142: simple_expression : term

10

Line 142: rel_expression	: simple_expression

10

Line 142: factor	: CONST_INT

10

Line 142: unary_expression : factor

10

Line 142: term :	unary_expression

10

Line 142: simple_expression : term

10

Line 142: rel_expression	: simple_expression

10

Line 142: logic_expression : rel_expression LOGICOP rel_expression

10 || 10

MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:

Line 142: expression : logic expression

t17

Line 143: variable : ID

b

Line 143: factor	: CONST_INT

2

Line 143: unary_expression : factor

2

Line 143: term :	unary_expression

2

Line 143: simple_expression : term

2

Line 143: rel_expression	: simple_expression

2

Line 143: logic_expression : rel_expression

2

Line 143: expression : variable ASSIGNOP logic_expression

b = 2

Line 143: expression_statement 	: expression SEMICOLON

b = 2;


Line 143: statement : expression_statement

b = 2;


Line 143: statements : statement

b = 2;


Line 144: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 144: statements : statements statement

b = 2;
 println ( b ) ;


Line 145: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.8.2

ScopeTable # 1.8
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 145: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 147: variable : ID

c

Line 147: factor	: CONST_INT

3

Line 147: unary_expression : factor

3

Line 147: term :	unary_expression

3

Line 147: simple_expression : term

3

Line 147: rel_expression	: simple_expression

3

Line 147: logic_expression : rel_expression

3

Line 147: expression : variable ASSIGNOP logic_expression

c = 3

Line 147: expression_statement 	: expression SEMICOLON

c = 3;


Line 147: statement : expression_statement

c = 3;


Line 147: statements : statement

c = 3;


Line 148: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 148: statements : statements statement

c = 3;
 println ( c ) ;


Line 149: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.8.3

ScopeTable # 1.8
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 149: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 149: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 149: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 149: statements : statements statement

int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 150: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.8
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 150: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 150: unit : func_definition

void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 150: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP
logicop_8 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:
MOV AX, t16
CMP AX, 0
JE L63
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L64
L63:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:
MOV AX, t17
CMP AX, 0
JE L61
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L62
L61:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L62:
L64:
POP DX
POP CX
POP BX
POP AX
RET
logicop_8 ENDP

Line 152: type_specifier	: VOID

void

Line 153: type_specifier	: INT

int


Line 153: declaration_list : ID

b


Line 153: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 153: statement : var_declaration

int b ;


Line 153: statements : statement

int b ;


Line 154: type_specifier	: INT

int


Line 154: declaration_list : ID

c


Line 154: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 154: statement : var_declaration

int c ;


Line 154: statements : statements statement

int b ;
 int c ;


Line 155: variable : ID

a

Line 155: factor	: CONST_INT

0

Line 155: unary_expression : factor

0

Line 155: term :	unary_expression

0

Line 155: simple_expression : term

0

Line 155: rel_expression	: simple_expression

0

Line 155: logic_expression : rel_expression

0

Line 155: expression : variable ASSIGNOP logic_expression

a = 0

Line 155: expression_statement 	: expression SEMICOLON

a = 0;


Line 155: statement : expression_statement

a = 0;


Line 155: statements : statements statement

int b ;
 int c ;
 a = 0;


Line 156: variable : ID

b

Line 156: factor	: CONST_INT

22

Line 156: unary_expression : factor

22

Line 156: term :	unary_expression

22

Line 156: simple_expression : term

22

Line 156: rel_expression	: simple_expression

22

Line 156: logic_expression : rel_expression

22

Line 156: expression : variable ASSIGNOP logic_expression

b = 22

Line 156: expression_statement 	: expression SEMICOLON

b = 22;


Line 156: statement : expression_statement

b = 22;


Line 156: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 22;


Line 157: variable : ID

c

Line 157: factor	: CONST_INT

33

Line 157: unary_expression : factor

33

Line 157: term :	unary_expression

33

Line 157: simple_expression : term

33

Line 157: rel_expression	: simple_expression

33

Line 157: logic_expression : rel_expression

33

Line 157: expression : variable ASSIGNOP logic_expression

c = 33

Line 157: expression_statement 	: expression SEMICOLON

c = 33;


Line 157: statement : expression_statement

c = 33;


Line 157: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;


Line 158: variable : ID

a

Line 158: factor	: variable

a

Line 158: unary_expression : factor

a

Line 158: term :	unary_expression

a

Line 158: simple_expression : term

a

Line 158: rel_expression	: simple_expression

a

Line 158: factor	: CONST_INT

1

Line 158: unary_expression : factor

1

Line 158: term :	unary_expression

1

Line 158: simple_expression : term

1

Line 158: rel_expression	: simple_expression

1

Line 158: logic_expression : rel_expression LOGICOP rel_expression

a || 1

MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L65
CMP BX, 0
JNE L65
MOV AX, 0
MOV t18, AX
JMP L66
L65:
MOV t18, 1
L66:

Line 158: expression : logic expression

t18

Line 159: variable : ID

a

Line 159: factor	: CONST_INT

1

Line 159: unary_expression : factor

1

Line 159: term :	unary_expression

1

Line 159: simple_expression : term

1

Line 159: rel_expression	: simple_expression

1

Line 159: logic_expression : rel_expression

1

Line 159: expression : variable ASSIGNOP logic_expression

a = 1

Line 159: expression_statement 	: expression SEMICOLON

a = 1;


Line 159: statement : expression_statement

a = 1;


Line 159: statements : statement

a = 1;


Line 160: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 160: statements : statements statement

a = 1;
 println ( a ) ;


Line 161: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.9.1

ScopeTable # 1.9
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 161: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 162: variable : ID

b

Line 162: factor	: variable

b

Line 162: unary_expression : factor

b

Line 162: term :	unary_expression

b

Line 162: simple_expression : term

b

Line 162: rel_expression	: simple_expression

b

Line 162: factor	: CONST_INT

0

Line 162: unary_expression : factor

0

Line 162: term :	unary_expression

0

Line 162: simple_expression : term

0

Line 162: rel_expression	: simple_expression

0

Line 162: logic_expression : rel_expression LOGICOP rel_expression

b || 0

MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L67
CMP BX, 0
JNE L67
MOV AX, 0
MOV t19, AX
JMP L68
L67:
MOV t19, 1
L68:

Line 162: expression : logic expression

t19

Line 163: variable : ID

b

Line 163: factor	: CONST_INT

2

Line 163: unary_expression : factor

2

Line 163: term :	unary_expression

2

Line 163: simple_expression : term

2

Line 163: rel_expression	: simple_expression

2

Line 163: logic_expression : rel_expression

2

Line 163: expression : variable ASSIGNOP logic_expression

b = 2

Line 163: expression_statement 	: expression SEMICOLON

b = 2;


Line 163: statement : expression_statement

b = 2;


Line 163: statements : statement

b = 2;


Line 164: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 164: statements : statements statement

b = 2;
 println ( b ) ;


Line 165: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.9.2

ScopeTable # 1.9
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 165: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 167: variable : ID

c

Line 167: factor	: CONST_INT

3

Line 167: unary_expression : factor

3

Line 167: term :	unary_expression

3

Line 167: simple_expression : term

3

Line 167: rel_expression	: simple_expression

3

Line 167: logic_expression : rel_expression

3

Line 167: expression : variable ASSIGNOP logic_expression

c = 3

Line 167: expression_statement 	: expression SEMICOLON

c = 3;


Line 167: statement : expression_statement

c = 3;


Line 167: statements : statement

c = 3;


Line 168: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 168: statements : statements statement

c = 3;
 println ( c ) ;


Line 169: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.9.3

ScopeTable # 1.9
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 169: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 169: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 169: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 169: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 170: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.9
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 170: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 170: unit : func_definition

void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 170: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP
logicop_8 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:
MOV AX, t16
CMP AX, 0
JE L63
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L64
L63:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:
MOV AX, t17
CMP AX, 0
JE L61
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L62
L61:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L62:
L64:
POP DX
POP CX
POP BX
POP AX
RET
logicop_8 ENDP
logicop_9 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L65
CMP BX, 0
JNE L65
MOV AX, 0
MOV t18, AX
JMP L66
L65:
MOV t18, 1
L66:
MOV AX, t18
CMP AX, 0
JE L71
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L72
L71:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L67
CMP BX, 0
JNE L67
MOV AX, 0
MOV t19, AX
JMP L68
L67:
MOV t19, 1
L68:
MOV AX, t19
CMP AX, 0
JE L69
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L70
L69:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L70:
L72:
POP DX
POP CX
POP BX
POP AX
RET
logicop_9 ENDP

Line 172: type_specifier	: VOID

void

Line 173: type_specifier	: INT

int


Line 173: declaration_list : ID

b


Line 173: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 173: statement : var_declaration

int b ;


Line 173: statements : statement

int b ;


Line 174: type_specifier	: INT

int


Line 174: declaration_list : ID

c


Line 174: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 174: statement : var_declaration

int c ;


Line 174: statements : statements statement

int b ;
 int c ;


Line 175: variable : ID

a

Line 175: factor	: CONST_INT

0

Line 175: unary_expression : factor

0

Line 175: term :	unary_expression

0

Line 175: simple_expression : term

0

Line 175: rel_expression	: simple_expression

0

Line 175: logic_expression : rel_expression

0

Line 175: expression : variable ASSIGNOP logic_expression

a = 0

Line 175: expression_statement 	: expression SEMICOLON

a = 0;


Line 175: statement : expression_statement

a = 0;


Line 175: statements : statements statement

int b ;
 int c ;
 a = 0;


Line 176: variable : ID

b

Line 176: factor	: CONST_INT

0

Line 176: unary_expression : factor

0

Line 176: term :	unary_expression

0

Line 176: simple_expression : term

0

Line 176: rel_expression	: simple_expression

0

Line 176: logic_expression : rel_expression

0

Line 176: expression : variable ASSIGNOP logic_expression

b = 0

Line 176: expression_statement 	: expression SEMICOLON

b = 0;


Line 176: statement : expression_statement

b = 0;


Line 176: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;


Line 177: variable : ID

c

Line 177: factor	: CONST_INT

33

Line 177: unary_expression : factor

33

Line 177: term :	unary_expression

33

Line 177: simple_expression : term

33

Line 177: rel_expression	: simple_expression

33

Line 177: logic_expression : rel_expression

33

Line 177: expression : variable ASSIGNOP logic_expression

c = 33

Line 177: expression_statement 	: expression SEMICOLON

c = 33;


Line 177: statement : expression_statement

c = 33;


Line 177: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;


Line 178: variable : ID

a

Line 178: factor	: variable

a

Line 178: unary_expression : factor

a

Line 178: term :	unary_expression

a

Line 178: simple_expression : term

a

Line 178: rel_expression	: simple_expression

a

Line 178: factor	: CONST_INT

1

Line 178: unary_expression : factor

1

Line 178: term :	unary_expression

1

Line 178: simple_expression : term

1

Line 178: rel_expression	: simple_expression

1

Line 178: logic_expression : rel_expression LOGICOP rel_expression

a || 1

MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L73
CMP BX, 0
JNE L73
MOV AX, 0
MOV t20, AX
JMP L74
L73:
MOV t20, 1
L74:

Line 178: expression : logic expression

t20

Line 179: variable : ID

a

Line 179: factor	: CONST_INT

1

Line 179: unary_expression : factor

1

Line 179: term :	unary_expression

1

Line 179: simple_expression : term

1

Line 179: rel_expression	: simple_expression

1

Line 179: logic_expression : rel_expression

1

Line 179: expression : variable ASSIGNOP logic_expression

a = 1

Line 179: expression_statement 	: expression SEMICOLON

a = 1;


Line 179: statement : expression_statement

a = 1;


Line 179: statements : statement

a = 1;


Line 180: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 180: statements : statements statement

a = 1;
 println ( a ) ;


Line 181: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.10.1

ScopeTable # 1.10
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 181: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 182: variable : ID

b

Line 182: factor	: variable

b

Line 182: unary_expression : factor

b

Line 182: term :	unary_expression

b

Line 182: simple_expression : term

b

Line 182: rel_expression	: simple_expression

b

Line 182: factor	: CONST_INT

10

Line 182: unary_expression : factor

10

Line 182: term :	unary_expression

10

Line 182: simple_expression : term

10

Line 182: rel_expression	: simple_expression

10

Line 182: logic_expression : rel_expression LOGICOP rel_expression

b || 10

MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JNE L75
CMP BX, 0
JNE L75
MOV AX, 0
MOV t21, AX
JMP L76
L75:
MOV t21, 1
L76:

Line 182: expression : logic expression

t21

Line 183: variable : ID

b

Line 183: factor	: CONST_INT

2

Line 183: unary_expression : factor

2

Line 183: term :	unary_expression

2

Line 183: simple_expression : term

2

Line 183: rel_expression	: simple_expression

2

Line 183: logic_expression : rel_expression

2

Line 183: expression : variable ASSIGNOP logic_expression

b = 2

Line 183: expression_statement 	: expression SEMICOLON

b = 2;


Line 183: statement : expression_statement

b = 2;


Line 183: statements : statement

b = 2;


Line 184: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 184: statements : statements statement

b = 2;
 println ( b ) ;


Line 185: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.10.2

ScopeTable # 1.10
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 185: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 187: variable : ID

c

Line 187: factor	: CONST_INT

3

Line 187: unary_expression : factor

3

Line 187: term :	unary_expression

3

Line 187: simple_expression : term

3

Line 187: rel_expression	: simple_expression

3

Line 187: logic_expression : rel_expression

3

Line 187: expression : variable ASSIGNOP logic_expression

c = 3

Line 187: expression_statement 	: expression SEMICOLON

c = 3;


Line 187: statement : expression_statement

c = 3;


Line 187: statements : statement

c = 3;


Line 188: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 188: statements : statements statement

c = 3;
 println ( c ) ;


Line 189: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.10.3

ScopeTable # 1.10
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 189: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 189: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 189: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 189: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 190: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.10
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 190: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_10 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 190: unit : func_definition

void logicop_10 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 190: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_10 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP
logicop_8 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:
MOV AX, t16
CMP AX, 0
JE L63
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L64
L63:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:
MOV AX, t17
CMP AX, 0
JE L61
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L62
L61:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L62:
L64:
POP DX
POP CX
POP BX
POP AX
RET
logicop_8 ENDP
logicop_9 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L65
CMP BX, 0
JNE L65
MOV AX, 0
MOV t18, AX
JMP L66
L65:
MOV t18, 1
L66:
MOV AX, t18
CMP AX, 0
JE L71
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L72
L71:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L67
CMP BX, 0
JNE L67
MOV AX, 0
MOV t19, AX
JMP L68
L67:
MOV t19, 1
L68:
MOV AX, t19
CMP AX, 0
JE L69
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L70
L69:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L70:
L72:
POP DX
POP CX
POP BX
POP AX
RET
logicop_9 ENDP
logicop_10 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L73
CMP BX, 0
JNE L73
MOV AX, 0
MOV t20, AX
JMP L74
L73:
MOV t20, 1
L74:
MOV AX, t20
CMP AX, 0
JE L79
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L80
L79:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JNE L75
CMP BX, 0
JNE L75
MOV AX, 0
MOV t21, AX
JMP L76
L75:
MOV t21, 1
L76:
MOV AX, t21
CMP AX, 0
JE L77
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L78
L77:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L78:
L80:
POP DX
POP CX
POP BX
POP AX
RET
logicop_10 ENDP

Line 192: type_specifier	: VOID

void

Line 193: type_specifier	: INT

int


Line 193: declaration_list : ID

b


Line 193: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 193: statement : var_declaration

int b ;


Line 193: statements : statement

int b ;


Line 194: type_specifier	: INT

int


Line 194: declaration_list : ID

c


Line 194: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 194: statement : var_declaration

int c ;


Line 194: statements : statements statement

int b ;
 int c ;


Line 195: variable : ID

a

Line 195: factor	: CONST_INT

0

Line 195: unary_expression : factor

0

Line 195: term :	unary_expression

0

Line 195: simple_expression : term

0

Line 195: rel_expression	: simple_expression

0

Line 195: logic_expression : rel_expression

0

Line 195: expression : variable ASSIGNOP logic_expression

a = 0

Line 195: expression_statement 	: expression SEMICOLON

a = 0;


Line 195: statement : expression_statement

a = 0;


Line 195: statements : statements statement

int b ;
 int c ;
 a = 0;


Line 196: variable : ID

b

Line 196: factor	: CONST_INT

0

Line 196: unary_expression : factor

0

Line 196: term :	unary_expression

0

Line 196: simple_expression : term

0

Line 196: rel_expression	: simple_expression

0

Line 196: logic_expression : rel_expression

0

Line 196: expression : variable ASSIGNOP logic_expression

b = 0

Line 196: expression_statement 	: expression SEMICOLON

b = 0;


Line 196: statement : expression_statement

b = 0;


Line 196: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;


Line 197: variable : ID

c

Line 197: factor	: CONST_INT

33

Line 197: unary_expression : factor

33

Line 197: term :	unary_expression

33

Line 197: simple_expression : term

33

Line 197: rel_expression	: simple_expression

33

Line 197: logic_expression : rel_expression

33

Line 197: expression : variable ASSIGNOP logic_expression

c = 33

Line 197: expression_statement 	: expression SEMICOLON

c = 33;


Line 197: statement : expression_statement

c = 33;


Line 197: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;


Line 198: variable : ID

a

Line 198: factor	: variable

a

Line 198: unary_expression : factor

a

Line 198: term :	unary_expression

a

Line 198: simple_expression : term

a

Line 198: rel_expression	: simple_expression

a

Line 198: factor	: CONST_INT

0

Line 198: unary_expression : factor

0

Line 198: term :	unary_expression

0

Line 198: simple_expression : term

0

Line 198: rel_expression	: simple_expression

0

Line 198: logic_expression : rel_expression LOGICOP rel_expression

a || 0

MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L81
CMP BX, 0
JNE L81
MOV AX, 0
MOV t22, AX
JMP L82
L81:
MOV t22, 1
L82:

Line 198: expression : logic expression

t22

Line 199: variable : ID

a

Line 199: factor	: CONST_INT

1

Line 199: unary_expression : factor

1

Line 199: term :	unary_expression

1

Line 199: simple_expression : term

1

Line 199: rel_expression	: simple_expression

1

Line 199: logic_expression : rel_expression

1

Line 199: expression : variable ASSIGNOP logic_expression

a = 1

Line 199: expression_statement 	: expression SEMICOLON

a = 1;


Line 199: statement : expression_statement

a = 1;


Line 199: statements : statement

a = 1;


Line 200: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 200: statements : statements statement

a = 1;
 println ( a ) ;


Line 201: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.11.1

ScopeTable # 1.11
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 201: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 202: variable : ID

b

Line 202: factor	: variable

b

Line 202: unary_expression : factor

b

Line 202: term :	unary_expression

b

Line 202: simple_expression : term

b

Line 202: rel_expression	: simple_expression

b

Line 202: factor	: CONST_INT

0

Line 202: unary_expression : factor

0

Line 202: term :	unary_expression

0

Line 202: simple_expression : term

0

Line 202: rel_expression	: simple_expression

0

Line 202: logic_expression : rel_expression LOGICOP rel_expression

b || 0

MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L83
CMP BX, 0
JNE L83
MOV AX, 0
MOV t23, AX
JMP L84
L83:
MOV t23, 1
L84:

Line 202: expression : logic expression

t23

Line 203: variable : ID

b

Line 203: factor	: CONST_INT

2

Line 203: unary_expression : factor

2

Line 203: term :	unary_expression

2

Line 203: simple_expression : term

2

Line 203: rel_expression	: simple_expression

2

Line 203: logic_expression : rel_expression

2

Line 203: expression : variable ASSIGNOP logic_expression

b = 2

Line 203: expression_statement 	: expression SEMICOLON

b = 2;


Line 203: statement : expression_statement

b = 2;


Line 203: statements : statement

b = 2;


Line 204: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 204: statements : statements statement

b = 2;
 println ( b ) ;


Line 205: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.11.2

ScopeTable # 1.11
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 205: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 207: variable : ID

c

Line 207: factor	: CONST_INT

3

Line 207: unary_expression : factor

3

Line 207: term :	unary_expression

3

Line 207: simple_expression : term

3

Line 207: rel_expression	: simple_expression

3

Line 207: logic_expression : rel_expression

3

Line 207: expression : variable ASSIGNOP logic_expression

c = 3

Line 207: expression_statement 	: expression SEMICOLON

c = 3;


Line 207: statement : expression_statement

c = 3;


Line 207: statements : statement

c = 3;


Line 208: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 208: statements : statements statement

c = 3;
 println ( c ) ;


Line 209: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.11.3

ScopeTable # 1.11
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 209: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 209: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 209: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 209: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 210: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.11
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 210: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_11 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 210: unit : func_definition

void logicop_11 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 210: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_10 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_11 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP
logicop_8 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:
MOV AX, t16
CMP AX, 0
JE L63
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L64
L63:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:
MOV AX, t17
CMP AX, 0
JE L61
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L62
L61:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L62:
L64:
POP DX
POP CX
POP BX
POP AX
RET
logicop_8 ENDP
logicop_9 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L65
CMP BX, 0
JNE L65
MOV AX, 0
MOV t18, AX
JMP L66
L65:
MOV t18, 1
L66:
MOV AX, t18
CMP AX, 0
JE L71
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L72
L71:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L67
CMP BX, 0
JNE L67
MOV AX, 0
MOV t19, AX
JMP L68
L67:
MOV t19, 1
L68:
MOV AX, t19
CMP AX, 0
JE L69
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L70
L69:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L70:
L72:
POP DX
POP CX
POP BX
POP AX
RET
logicop_9 ENDP
logicop_10 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L73
CMP BX, 0
JNE L73
MOV AX, 0
MOV t20, AX
JMP L74
L73:
MOV t20, 1
L74:
MOV AX, t20
CMP AX, 0
JE L79
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L80
L79:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JNE L75
CMP BX, 0
JNE L75
MOV AX, 0
MOV t21, AX
JMP L76
L75:
MOV t21, 1
L76:
MOV AX, t21
CMP AX, 0
JE L77
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L78
L77:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L78:
L80:
POP DX
POP CX
POP BX
POP AX
RET
logicop_10 ENDP
logicop_11 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L81
CMP BX, 0
JNE L81
MOV AX, 0
MOV t22, AX
JMP L82
L81:
MOV t22, 1
L82:
MOV AX, t22
CMP AX, 0
JE L87
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L88
L87:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L83
CMP BX, 0
JNE L83
MOV AX, 0
MOV t23, AX
JMP L84
L83:
MOV t23, 1
L84:
MOV AX, t23
CMP AX, 0
JE L85
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L86
L85:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L86:
L88:
POP DX
POP CX
POP BX
POP AX
RET
logicop_11 ENDP

Line 212: type_specifier	: VOID

void

Line 213: type_specifier	: INT

int


Line 213: declaration_list : ID

b


Line 213: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 213: statement : var_declaration

int b ;


Line 213: statements : statement

int b ;


Line 214: type_specifier	: INT

int


Line 214: declaration_list : ID

c


Line 214: var_declaration : type_specifier declaration_list SEMICOLON

int c ;



Line 214: statement : var_declaration

int c ;


Line 214: statements : statements statement

int b ;
 int c ;


Line 215: variable : ID

a

Line 215: factor	: CONST_INT

0

Line 215: unary_expression : factor

0

Line 215: term :	unary_expression

0

Line 215: simple_expression : term

0

Line 215: rel_expression	: simple_expression

0

Line 215: logic_expression : rel_expression

0

Line 215: expression : variable ASSIGNOP logic_expression

a = 0

Line 215: expression_statement 	: expression SEMICOLON

a = 0;


Line 215: statement : expression_statement

a = 0;


Line 215: statements : statements statement

int b ;
 int c ;
 a = 0;


Line 216: variable : ID

b

Line 216: factor	: CONST_INT

0

Line 216: unary_expression : factor

0

Line 216: term :	unary_expression

0

Line 216: simple_expression : term

0

Line 216: rel_expression	: simple_expression

0

Line 216: logic_expression : rel_expression

0

Line 216: expression : variable ASSIGNOP logic_expression

b = 0

Line 216: expression_statement 	: expression SEMICOLON

b = 0;


Line 216: statement : expression_statement

b = 0;


Line 216: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;


Line 217: variable : ID

c

Line 217: factor	: CONST_INT

33

Line 217: unary_expression : factor

33

Line 217: term :	unary_expression

33

Line 217: simple_expression : term

33

Line 217: rel_expression	: simple_expression

33

Line 217: logic_expression : rel_expression

33

Line 217: expression : variable ASSIGNOP logic_expression

c = 33

Line 217: expression_statement 	: expression SEMICOLON

c = 33;


Line 217: statement : expression_statement

c = 33;


Line 217: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;


Line 218: factor	: CONST_INT

0

Line 218: unary_expression : factor

0

Line 218: term :	unary_expression

0

Line 218: simple_expression : term

0

Line 218: rel_expression	: simple_expression

0

Line 218: variable : ID

a

Line 218: factor	: variable

a

Line 218: unary_expression : factor

a

Line 218: term :	unary_expression

a

Line 218: simple_expression : term

a

Line 218: rel_expression	: simple_expression

a

Line 218: logic_expression : rel_expression LOGICOP rel_expression

0 || a

MOV AX, 0
MOV AX, 0
MOV BX, a
CMP AX, 0
JNE L89
CMP BX, 0
JNE L89
MOV AX, 0
MOV t24, AX
JMP L90
L89:
MOV t24, 1
L90:

Line 218: expression : logic expression

t24

Line 219: variable : ID

a

Line 219: factor	: CONST_INT

1

Line 219: unary_expression : factor

1

Line 219: term :	unary_expression

1

Line 219: simple_expression : term

1

Line 219: rel_expression	: simple_expression

1

Line 219: logic_expression : rel_expression

1

Line 219: expression : variable ASSIGNOP logic_expression

a = 1

Line 219: expression_statement 	: expression SEMICOLON

a = 1;


Line 219: statement : expression_statement

a = 1;


Line 219: statements : statement

a = 1;


Line 220: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 220: statements : statements statement

a = 1;
 println ( a ) ;


Line 221: compound_statement : LCURL statements RCURL

{
a = 1;
 println ( a ) ;
}


ScopeTable # 1.12.1

ScopeTable # 1.12
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
13 -->  < logicop_12 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 221: statement : compound_statement

{
a = 1;
 println ( a ) ;
}


Line 222: factor	: CONST_INT

0

Line 222: unary_expression : factor

0

Line 222: term :	unary_expression

0

Line 222: simple_expression : term

0

Line 222: rel_expression	: simple_expression

0

Line 222: variable : ID

b

Line 222: factor	: variable

b

Line 222: unary_expression : factor

b

Line 222: term :	unary_expression

b

Line 222: simple_expression : term

b

Line 222: rel_expression	: simple_expression

b

Line 222: logic_expression : rel_expression LOGICOP rel_expression

0 || b

MOV AX, 0
MOV AX, 0
MOV BX, b
CMP AX, 0
JNE L91
CMP BX, 0
JNE L91
MOV AX, 0
MOV t25, AX
JMP L92
L91:
MOV t25, 1
L92:

Line 222: expression : logic expression

t25

Line 223: variable : ID

b

Line 223: factor	: CONST_INT

2

Line 223: unary_expression : factor

2

Line 223: term :	unary_expression

2

Line 223: simple_expression : term

2

Line 223: rel_expression	: simple_expression

2

Line 223: logic_expression : rel_expression

2

Line 223: expression : variable ASSIGNOP logic_expression

b = 2

Line 223: expression_statement 	: expression SEMICOLON

b = 2;


Line 223: statement : expression_statement

b = 2;


Line 223: statements : statement

b = 2;


Line 224: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 224: statements : statements statement

b = 2;
 println ( b ) ;


Line 225: compound_statement : LCURL statements RCURL

{
b = 2;
 println ( b ) ;
}


ScopeTable # 1.12.2

ScopeTable # 1.12
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
13 -->  < logicop_12 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 225: statement : compound_statement

{
b = 2;
 println ( b ) ;
}


Line 227: variable : ID

c

Line 227: factor	: CONST_INT

3

Line 227: unary_expression : factor

3

Line 227: term :	unary_expression

3

Line 227: simple_expression : term

3

Line 227: rel_expression	: simple_expression

3

Line 227: logic_expression : rel_expression

3

Line 227: expression : variable ASSIGNOP logic_expression

c = 3

Line 227: expression_statement 	: expression SEMICOLON

c = 3;


Line 227: statement : expression_statement

c = 3;


Line 227: statements : statement

c = 3;


Line 228: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( c ) ;


Line 228: statements : statements statement

c = 3;
 println ( c ) ;


Line 229: compound_statement : LCURL statements RCURL

{
c = 3;
 println ( c ) ;
}


ScopeTable # 1.12.3

ScopeTable # 1.12
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
13 -->  < logicop_12 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 229: statement : compound_statement

{
c = 3;
 println ( c ) ;
}


Line 229: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 229: statement : IF LPAREN expression RPAREN statement ELSE statement

if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 229: statements : statements statement

int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}


Line 230: compound_statement : LCURL statements RCURL

{
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


ScopeTable # 1.12
8 -->  < b , ID >  
9 -->  < c , ID >  

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
13 -->  < logicop_12 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 230: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void logicop_12 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 230: unit : func_definition

void logicop_12 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


Line 230: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_10 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_11 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_12 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP
logicop_8 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:
MOV AX, t16
CMP AX, 0
JE L63
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L64
L63:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:
MOV AX, t17
CMP AX, 0
JE L61
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L62
L61:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L62:
L64:
POP DX
POP CX
POP BX
POP AX
RET
logicop_8 ENDP
logicop_9 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L65
CMP BX, 0
JNE L65
MOV AX, 0
MOV t18, AX
JMP L66
L65:
MOV t18, 1
L66:
MOV AX, t18
CMP AX, 0
JE L71
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L72
L71:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L67
CMP BX, 0
JNE L67
MOV AX, 0
MOV t19, AX
JMP L68
L67:
MOV t19, 1
L68:
MOV AX, t19
CMP AX, 0
JE L69
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L70
L69:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L70:
L72:
POP DX
POP CX
POP BX
POP AX
RET
logicop_9 ENDP
logicop_10 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L73
CMP BX, 0
JNE L73
MOV AX, 0
MOV t20, AX
JMP L74
L73:
MOV t20, 1
L74:
MOV AX, t20
CMP AX, 0
JE L79
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L80
L79:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JNE L75
CMP BX, 0
JNE L75
MOV AX, 0
MOV t21, AX
JMP L76
L75:
MOV t21, 1
L76:
MOV AX, t21
CMP AX, 0
JE L77
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L78
L77:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L78:
L80:
POP DX
POP CX
POP BX
POP AX
RET
logicop_10 ENDP
logicop_11 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L81
CMP BX, 0
JNE L81
MOV AX, 0
MOV t22, AX
JMP L82
L81:
MOV t22, 1
L82:
MOV AX, t22
CMP AX, 0
JE L87
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L88
L87:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L83
CMP BX, 0
JNE L83
MOV AX, 0
MOV t23, AX
JMP L84
L83:
MOV t23, 1
L84:
MOV AX, t23
CMP AX, 0
JE L85
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L86
L85:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L86:
L88:
POP DX
POP CX
POP BX
POP AX
RET
logicop_11 ENDP
logicop_12 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV BX, a
CMP AX, 0
JNE L89
CMP BX, 0
JNE L89
MOV AX, 0
MOV t24, AX
JMP L90
L89:
MOV t24, 1
L90:
MOV AX, t24
CMP AX, 0
JE L95
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L96
L95:
MOV AX, 0
MOV AX, 0
MOV BX, b
CMP AX, 0
JNE L91
CMP BX, 0
JNE L91
MOV AX, 0
MOV t25, AX
JMP L92
L91:
MOV t25, 1
L92:
MOV AX, t25
CMP AX, 0
JE L93
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L94
L93:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L94:
L96:
POP DX
POP CX
POP BX
POP AX
RET
logicop_12 ENDP

Line 232: type_specifier	: INT

int


Line 233: argument_list : |

 

Line 233: factor	: ID LPAREN argument_list RPAREN

logicop_1 (   )

Line 233: unary_expression : factor

logicop_1 (   )

Line 233: term :	unary_expression

logicop_1 (   )

Line 233: simple_expression : term

logicop_1 (   )

Line 233: rel_expression	: simple_expression

logicop_1 (   )

Line 233: logic_expression : rel_expression

logicop_1 (   )

Line 233: expression : logic expression

logicop_1 (   )

Line 233: expression_statement 	: expression SEMICOLON

logicop_1 (   );


Line 233: statement : expression_statement

logicop_1 (   );


Line 233: statements : statement

logicop_1 (   );


Line 234: argument_list : |

 

Line 234: factor	: ID LPAREN argument_list RPAREN

logicop_2 (   )

Line 234: unary_expression : factor

logicop_2 (   )

Line 234: term :	unary_expression

logicop_2 (   )

Line 234: simple_expression : term

logicop_2 (   )

Line 234: rel_expression	: simple_expression

logicop_2 (   )

Line 234: logic_expression : rel_expression

logicop_2 (   )

Line 234: expression : logic expression

logicop_2 (   )

Line 234: expression_statement 	: expression SEMICOLON

logicop_2 (   );


Line 234: statement : expression_statement

logicop_2 (   );


Line 234: statements : statements statement

logicop_1 (   );
 logicop_2 (   );


Line 235: argument_list : |

 

Line 235: factor	: ID LPAREN argument_list RPAREN

logicop_3 (   )

Line 235: unary_expression : factor

logicop_3 (   )

Line 235: term :	unary_expression

logicop_3 (   )

Line 235: simple_expression : term

logicop_3 (   )

Line 235: rel_expression	: simple_expression

logicop_3 (   )

Line 235: logic_expression : rel_expression

logicop_3 (   )

Line 235: expression : logic expression

logicop_3 (   )

Line 235: expression_statement 	: expression SEMICOLON

logicop_3 (   );


Line 235: statement : expression_statement

logicop_3 (   );


Line 235: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );


Line 236: argument_list : |

 

Line 236: factor	: ID LPAREN argument_list RPAREN

logicop_4 (   )

Line 236: unary_expression : factor

logicop_4 (   )

Line 236: term :	unary_expression

logicop_4 (   )

Line 236: simple_expression : term

logicop_4 (   )

Line 236: rel_expression	: simple_expression

logicop_4 (   )

Line 236: logic_expression : rel_expression

logicop_4 (   )

Line 236: expression : logic expression

logicop_4 (   )

Line 236: expression_statement 	: expression SEMICOLON

logicop_4 (   );


Line 236: statement : expression_statement

logicop_4 (   );


Line 236: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );


Line 237: argument_list : |

 

Line 237: factor	: ID LPAREN argument_list RPAREN

logicop_5 (   )

Line 237: unary_expression : factor

logicop_5 (   )

Line 237: term :	unary_expression

logicop_5 (   )

Line 237: simple_expression : term

logicop_5 (   )

Line 237: rel_expression	: simple_expression

logicop_5 (   )

Line 237: logic_expression : rel_expression

logicop_5 (   )

Line 237: expression : logic expression

logicop_5 (   )

Line 237: expression_statement 	: expression SEMICOLON

logicop_5 (   );


Line 237: statement : expression_statement

logicop_5 (   );


Line 237: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );


Line 238: argument_list : |

 

Line 238: factor	: ID LPAREN argument_list RPAREN

logicop_6 (   )

Line 238: unary_expression : factor

logicop_6 (   )

Line 238: term :	unary_expression

logicop_6 (   )

Line 238: simple_expression : term

logicop_6 (   )

Line 238: rel_expression	: simple_expression

logicop_6 (   )

Line 238: logic_expression : rel_expression

logicop_6 (   )

Line 238: expression : logic expression

logicop_6 (   )

Line 238: expression_statement 	: expression SEMICOLON

logicop_6 (   );


Line 238: statement : expression_statement

logicop_6 (   );


Line 238: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );


Line 239: argument_list : |

 

Line 239: factor	: ID LPAREN argument_list RPAREN

logicop_7 (   )

Line 239: unary_expression : factor

logicop_7 (   )

Line 239: term :	unary_expression

logicop_7 (   )

Line 239: simple_expression : term

logicop_7 (   )

Line 239: rel_expression	: simple_expression

logicop_7 (   )

Line 239: logic_expression : rel_expression

logicop_7 (   )

Line 239: expression : logic expression

logicop_7 (   )

Line 239: expression_statement 	: expression SEMICOLON

logicop_7 (   );


Line 239: statement : expression_statement

logicop_7 (   );


Line 239: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );


Line 240: argument_list : |

 

Line 240: factor	: ID LPAREN argument_list RPAREN

logicop_8 (   )

Line 240: unary_expression : factor

logicop_8 (   )

Line 240: term :	unary_expression

logicop_8 (   )

Line 240: simple_expression : term

logicop_8 (   )

Line 240: rel_expression	: simple_expression

logicop_8 (   )

Line 240: logic_expression : rel_expression

logicop_8 (   )

Line 240: expression : logic expression

logicop_8 (   )

Line 240: expression_statement 	: expression SEMICOLON

logicop_8 (   );


Line 240: statement : expression_statement

logicop_8 (   );


Line 240: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );


Line 241: argument_list : |

 

Line 241: factor	: ID LPAREN argument_list RPAREN

logicop_9 (   )

Line 241: unary_expression : factor

logicop_9 (   )

Line 241: term :	unary_expression

logicop_9 (   )

Line 241: simple_expression : term

logicop_9 (   )

Line 241: rel_expression	: simple_expression

logicop_9 (   )

Line 241: logic_expression : rel_expression

logicop_9 (   )

Line 241: expression : logic expression

logicop_9 (   )

Line 241: expression_statement 	: expression SEMICOLON

logicop_9 (   );


Line 241: statement : expression_statement

logicop_9 (   );


Line 241: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );


Line 242: argument_list : |

 

Line 242: factor	: ID LPAREN argument_list RPAREN

logicop_10 (   )

Line 242: unary_expression : factor

logicop_10 (   )

Line 242: term :	unary_expression

logicop_10 (   )

Line 242: simple_expression : term

logicop_10 (   )

Line 242: rel_expression	: simple_expression

logicop_10 (   )

Line 242: logic_expression : rel_expression

logicop_10 (   )

Line 242: expression : logic expression

logicop_10 (   )

Line 242: expression_statement 	: expression SEMICOLON

logicop_10 (   );


Line 242: statement : expression_statement

logicop_10 (   );


Line 242: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );


Line 243: argument_list : |

 

Line 243: factor	: ID LPAREN argument_list RPAREN

logicop_11 (   )

Line 243: unary_expression : factor

logicop_11 (   )

Line 243: term :	unary_expression

logicop_11 (   )

Line 243: simple_expression : term

logicop_11 (   )

Line 243: rel_expression	: simple_expression

logicop_11 (   )

Line 243: logic_expression : rel_expression

logicop_11 (   )

Line 243: expression : logic expression

logicop_11 (   )

Line 243: expression_statement 	: expression SEMICOLON

logicop_11 (   );


Line 243: statement : expression_statement

logicop_11 (   );


Line 243: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );
 logicop_11 (   );


Line 244: argument_list : |

 

Line 244: factor	: ID LPAREN argument_list RPAREN

logicop_12 (   )

Line 244: unary_expression : factor

logicop_12 (   )

Line 244: term :	unary_expression

logicop_12 (   )

Line 244: simple_expression : term

logicop_12 (   )

Line 244: rel_expression	: simple_expression

logicop_12 (   )

Line 244: logic_expression : rel_expression

logicop_12 (   )

Line 244: expression : logic expression

logicop_12 (   )

Line 244: expression_statement 	: expression SEMICOLON

logicop_12 (   );


Line 244: statement : expression_statement

logicop_12 (   );


Line 244: statements : statements statement

logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );
 logicop_11 (   );
 logicop_12 (   );


Line 245: compound_statement : LCURL statements RCURL

{
logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );
 logicop_11 (   );
 logicop_12 (   );
}


ScopeTable # 1.13

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >   < main , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
13 -->  < logicop_12 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Line 245: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );
 logicop_11 (   );
 logicop_12 (   );
}


Line 245: unit : func_definition

int main ( ) {
logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );
 logicop_11 (   );
 logicop_12 (   );
}


Line 245: program : program unit

int a ;
 void logicop_1 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t1 ) {
a = 1;
 println ( a ) ;
}
 else if ( t2 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_2 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 a = t3;
 if ( t4 ) {
a = 1;
 println ( a ) ;
}
 else if ( t5 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_3 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t6 ) {
a = 1;
 println ( a ) ;
}
 else if ( t7 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_4 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t8 ) {
a = 1;
 println ( a ) ;
}
 else if ( t9 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_5 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t10 ) {
a = 1;
 println ( a ) ;
}
 else if ( t11 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_6 ( ) {
int b ;
 a = 11;
 b = 22;
 if ( t12 ) {
a = 1;
 println ( a ) ;
}
 else if ( t13 ) {
b = 2;
 println ( b ) ;
}
}
 void logicop_7 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t14 ) {
a = 1;
 println ( a ) ;
}
 else if ( t15 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_8 ( ) {
int b ;
 int c ;
 a = 11;
 b = 22;
 c = 33;
 if ( t16 ) {
a = 1;
 println ( a ) ;
}
 else if ( t17 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_9 ( ) {
int b ;
 int c ;
 a = 0;
 b = 22;
 c = 33;
 if ( t18 ) {
a = 1;
 println ( a ) ;
}
 else if ( t19 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_10 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t20 ) {
a = 1;
 println ( a ) ;
}
 else if ( t21 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_11 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t22 ) {
a = 1;
 println ( a ) ;
}
 else if ( t23 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 void logicop_12 ( ) {
int b ;
 int c ;
 a = 0;
 b = 0;
 c = 33;
 if ( t24 ) {
a = 1;
 println ( a ) ;
}
 else if ( t25 ) {
b = 2;
 println ( b ) ;
}
 else {
c = 3;
 println ( c ) ;
}
}
 int main ( ) {
logicop_1 (   );
 logicop_2 (   );
 logicop_3 (   );
 logicop_4 (   );
 logicop_5 (   );
 logicop_6 (   );
 logicop_7 (   );
 logicop_8 (   );
 logicop_9 (   );
 logicop_10 (   );
 logicop_11 (   );
 logicop_12 (   );
}


logicop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JE L1
CMP BX, 0
JE L1
MOV AX, 1
MOV t1, AX
JMP L2
L1:
MOV AX, 0
MOV t1, AX
L2:
MOV AX, t1
CMP AX, 0
JE L6
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L7
L6:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JE L3
CMP BX, 0
JE L3
MOV AX, 1
MOV t2, AX
JMP L4
L3:
MOV AX, 0
MOV t2, AX
L4:
MOV AX, t2
CMP AX, 0
JE L5
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L5:
L7:
POP DX
POP CX
POP BX
POP AX
RET
logicop_1 ENDP
logicop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, b
MOV BX, c
CMP AX, 0
JE L8
CMP BX, 0
JE L8
MOV AX, 1
MOV t3, AX
JMP L9
L8:
MOV AX, 0
MOV t3, AX
L9:
MOV a, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JE L10
CMP BX, 0
JE L10
MOV AX, 1
MOV t4, AX
JMP L11
L10:
MOV AX, 0
MOV t4, AX
L11:
MOV AX, t4
CMP AX, 0
JE L16
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L17
L16:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JE L12
CMP BX, 0
JE L12
MOV AX, 1
MOV t5, AX
JMP L13
L12:
MOV AX, 0
MOV t5, AX
L13:
MOV AX, t5
CMP AX, 0
JE L14
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L15
L14:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L15:
L17:
POP DX
POP CX
POP BX
POP AX
RET
logicop_2 ENDP
logicop_3 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 1
MOV AX, 0
MOV BX, 1
CMP AX, 0
JE L18
CMP BX, 0
JE L18
MOV AX, 1
MOV t6, AX
JMP L19
L18:
MOV AX, 0
MOV t6, AX
L19:
MOV AX, t6
CMP AX, 0
JE L24
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L25
L24:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JE L20
CMP BX, 0
JE L20
MOV AX, 1
MOV t7, AX
JMP L21
L20:
MOV AX, 0
MOV t7, AX
L21:
MOV AX, t7
CMP AX, 0
JE L22
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L23
L22:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L23:
L25:
POP DX
POP CX
POP BX
POP AX
RET
logicop_3 ENDP
logicop_4 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L26
CMP BX, 0
JE L26
MOV AX, 1
MOV t8, AX
JMP L27
L26:
MOV AX, 0
MOV t8, AX
L27:
MOV AX, t8
CMP AX, 0
JE L32
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L33
L32:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JE L28
CMP BX, 0
JE L28
MOV AX, 1
MOV t9, AX
JMP L29
L28:
MOV AX, 0
MOV t9, AX
L29:
MOV AX, t9
CMP AX, 0
JE L30
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L31
L30:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L31:
L33:
POP DX
POP CX
POP BX
POP AX
RET
logicop_4 ENDP
logicop_5 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JE L34
CMP BX, 0
JE L34
MOV AX, 1
MOV t10, AX
JMP L35
L34:
MOV AX, 0
MOV t10, AX
L35:
MOV AX, t10
CMP AX, 0
JE L40
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L41
L40:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JE L36
CMP BX, 0
JE L36
MOV AX, 1
MOV t11, AX
JMP L37
L36:
MOV AX, 0
MOV t11, AX
L37:
MOV AX, t11
CMP AX, 0
JE L38
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L39
L38:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L39:
L41:
POP DX
POP CX
POP BX
POP AX
RET
logicop_5 ENDP
logicop_6 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 5
MOV AX, 10
MOV AX, 5
MOV BX, 10
CMP AX, 0
JNE L42
CMP BX, 0
JNE L42
MOV AX, 0
MOV t12, AX
JMP L43
L42:
MOV t12, 1
L43:
MOV AX, t12
CMP AX, 0
JE L47
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L48
L47:
MOV AX, 10
MOV AX, 0
MOV AX, 10
MOV BX, 0
CMP AX, 0
JNE L44
CMP BX, 0
JNE L44
MOV AX, 0
MOV t13, AX
JMP L45
L44:
MOV t13, 1
L45:
MOV AX, t13
CMP AX, 0
JE L46
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
L46:
L48:
POP DX
POP CX
POP BX
POP AX
RET
logicop_6 ENDP
logicop_7 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L49
CMP BX, 0
JNE L49
MOV AX, 0
MOV t14, AX
JMP L50
L49:
MOV t14, 1
L50:
MOV AX, t14
CMP AX, 0
JE L55
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L56
L55:
MOV AX, 10
MOV AX, 10
MOV BX, a
CMP AX, 0
JNE L51
CMP BX, 0
JNE L51
MOV AX, 0
MOV t15, AX
JMP L52
L51:
MOV t15, 1
L52:
MOV AX, t15
CMP AX, 0
JE L53
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L54
L53:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L54:
L56:
POP DX
POP CX
POP BX
POP AX
RET
logicop_7 ENDP
logicop_8 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 11
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV AX, 0
MOV BX, 0
CMP AX, 0
JNE L57
CMP BX, 0
JNE L57
MOV AX, 0
MOV t16, AX
JMP L58
L57:
MOV t16, 1
L58:
MOV AX, t16
CMP AX, 0
JE L63
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L64
L63:
MOV AX, 10
MOV AX, 10
MOV AX, 10
MOV BX, 10
CMP AX, 0
JNE L59
CMP BX, 0
JNE L59
MOV AX, 0
MOV t17, AX
JMP L60
L59:
MOV t17, 1
L60:
MOV AX, t17
CMP AX, 0
JE L61
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L62
L61:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L62:
L64:
POP DX
POP CX
POP BX
POP AX
RET
logicop_8 ENDP
logicop_9 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 22
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L65
CMP BX, 0
JNE L65
MOV AX, 0
MOV t18, AX
JMP L66
L65:
MOV t18, 1
L66:
MOV AX, t18
CMP AX, 0
JE L71
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L72
L71:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L67
CMP BX, 0
JNE L67
MOV AX, 0
MOV t19, AX
JMP L68
L67:
MOV t19, 1
L68:
MOV AX, t19
CMP AX, 0
JE L69
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L70
L69:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L70:
L72:
POP DX
POP CX
POP BX
POP AX
RET
logicop_9 ENDP
logicop_10 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 1
MOV AX, a
MOV BX, 1
CMP AX, 0
JNE L73
CMP BX, 0
JNE L73
MOV AX, 0
MOV t20, AX
JMP L74
L73:
MOV t20, 1
L74:
MOV AX, t20
CMP AX, 0
JE L79
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L80
L79:
MOV AX, 10
MOV AX, b
MOV BX, 10
CMP AX, 0
JNE L75
CMP BX, 0
JNE L75
MOV AX, 0
MOV t21, AX
JMP L76
L75:
MOV t21, 1
L76:
MOV AX, t21
CMP AX, 0
JE L77
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L78
L77:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L78:
L80:
POP DX
POP CX
POP BX
POP AX
RET
logicop_10 ENDP
logicop_11 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, a
MOV BX, 0
CMP AX, 0
JNE L81
CMP BX, 0
JNE L81
MOV AX, 0
MOV t22, AX
JMP L82
L81:
MOV t22, 1
L82:
MOV AX, t22
CMP AX, 0
JE L87
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L88
L87:
MOV AX, 0
MOV AX, b
MOV BX, 0
CMP AX, 0
JNE L83
CMP BX, 0
JNE L83
MOV AX, 0
MOV t23, AX
JMP L84
L83:
MOV t23, 1
L84:
MOV AX, t23
CMP AX, 0
JE L85
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L86
L85:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L86:
L88:
POP DX
POP CX
POP BX
POP AX
RET
logicop_11 ENDP
logicop_12 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 0
MOV a, AX
MOV AX, 0
MOV b, AX
MOV AX, 33
MOV c, AX
MOV AX, 0
MOV AX, 0
MOV BX, a
CMP AX, 0
JNE L89
CMP BX, 0
JNE L89
MOV AX, 0
MOV t24, AX
JMP L90
L89:
MOV t24, 1
L90:
MOV AX, t24
CMP AX, 0
JE L95
MOV AX, 1
MOV a, AX
MOV AX, a
CALL OUTDEC
JMP L96
L95:
MOV AX, 0
MOV AX, 0
MOV BX, b
CMP AX, 0
JNE L91
CMP BX, 0
JNE L91
MOV AX, 0
MOV t25, AX
JMP L92
L91:
MOV t25, 1
L92:
MOV AX, t25
CMP AX, 0
JE L93
MOV AX, 2
MOV b, AX
MOV AX, b
CALL OUTDEC
JMP L94
L93:
MOV AX, 3
MOV c, AX
MOV AX, c
CALL OUTDEC
L94:
L96:
POP DX
POP CX
POP BX
POP AX
RET
logicop_12 ENDP
main PROC
MOV AX, @DATA 
MOV DS, AX
CALL logicop_1
CALL logicop_2
CALL logicop_3
CALL logicop_4
CALL logicop_5
CALL logicop_6
CALL logicop_7
CALL logicop_8
CALL logicop_9
CALL logicop_10
CALL logicop_11
CALL logicop_12

MOV AH, 4CH
INT 21H
main ENDP

Line 245: start : program

ScopeTable # 1
0 -->  < logicop_8 , ID >  
1 -->  < logicop_9 , ID >   < main , ID >  
7 -->  < a , ID >  
11 -->  < logicop_10 , ID >  
12 -->  < logicop_11 , ID >  
13 -->  < logicop_12 , ID >  
23 -->  < logicop_1 , ID >  
24 -->  < logicop_2 , ID >  
25 -->  < logicop_3 , ID >  
26 -->  < logicop_4 , ID >  
27 -->  < logicop_5 , ID >  
28 -->  < logicop_6 , ID >  
29 -->  < logicop_7 , ID >  

Total lines: 245
Total errors: 0
