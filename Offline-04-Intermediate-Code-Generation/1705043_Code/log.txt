Line 1: type_specifier	: INT

int


Line 1: declaration_list : ID

a


Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int a ;



Line 1: unit : var_declaration

int a ;



Line 1: program : unit

int a ;



Line 2: type_specifier	: INT

int


Line 2: declaration_list : ID

b


Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 2: unit : var_declaration

int b ;



Line 2: program : program unit

int a ;
 int b ;



Line 4: type_specifier	: VOID

void

Line 5: variable : ID

a

Line 5: factor	: CONST_INT

1

Line 5: unary_expression : factor

1

Line 5: term :	unary_expression

1

Line 5: simple_expression : term

1

Line 5: rel_expression	: simple_expression

1

Line 5: logic_expression : rel_expression

1

Line 5: expression : variable ASSIGNOP logic_expression

a = 1

Line 5: expression_statement 	: expression SEMICOLON

a = 1;


Line 5: statement : expression_statement

a = 1;


Line 5: statements : statement

a = 1;


Line 6: variable : ID

b

Line 6: factor	: CONST_INT

2

Line 6: unary_expression : factor

2

Line 6: term :	unary_expression

2

Line 6: simple_expression : term

2

Line 6: rel_expression	: simple_expression

2

Line 6: logic_expression : rel_expression

2

Line 6: expression : variable ASSIGNOP logic_expression

b = 2

Line 6: expression_statement 	: expression SEMICOLON

b = 2;


Line 6: statement : expression_statement

b = 2;


Line 6: statements : statements statement

a = 1;
 b = 2;


Line 7: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 7: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;


Line 8: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 8: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;


Line 10: variable : ID

a

Line 10: factor	: variable INCOP

a ++

Line 10: unary_expression : factor

a ++

Line 10: term :	unary_expression

a ++

Line 10: simple_expression : term

a ++

Line 10: rel_expression	: simple_expression

a ++

Line 10: logic_expression : rel_expression

a ++

Line 10: expression : logic expression

a ++

Line 10: expression_statement 	: expression SEMICOLON

a ++;


Line 10: statement : expression_statement

a ++;


Line 10: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;


Line 11: variable : ID

b

Line 11: factor	: variable INCOP

b ++

Line 11: unary_expression : factor

b ++

Line 11: term :	unary_expression

b ++

Line 11: simple_expression : term

b ++

Line 11: rel_expression	: simple_expression

b ++

Line 11: logic_expression : rel_expression

b ++

Line 11: expression : logic expression

b ++

Line 11: expression_statement 	: expression SEMICOLON

b ++;


Line 11: statement : expression_statement

b ++;


Line 11: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;


Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 12: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;


Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 13: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;


Line 14: compound_statement : LCURL statements RCURL

{
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


ScopeTable # 1.1

ScopeTable # 1
7 -->  < a , ID >  
8 -->  < b , ID >  
21 -->  < incop_1 , ID >  

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


Line 14: unit : func_definition

void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


Line 14: program : program unit

int a ;
 int b ;
 void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


incop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_1 ENDP

Line 16: type_specifier	: VOID

void

Line 17: variable : ID

a

Line 17: factor	: CONST_INT

1

Line 17: unary_expression : factor

1

Line 17: unary_expression : ADDOP unary_expression

- 1

Line 17: term :	unary_expression

- 1

Line 17: simple_expression : term

- 1

Line 17: rel_expression	: simple_expression

- 1

Line 17: logic_expression : rel_expression

- 1

Line 17: expression : variable ASSIGNOP logic_expression

a = - 1

Line 17: expression_statement 	: expression SEMICOLON

a = - 1;


Line 17: statement : expression_statement

a = - 1;


Line 17: statements : statement

a = - 1;


Line 18: variable : ID

b

Line 18: factor	: CONST_INT

2

Line 18: unary_expression : factor

2

Line 18: unary_expression : ADDOP unary_expression

- 2

Line 18: term :	unary_expression

- 2

Line 18: simple_expression : term

- 2

Line 18: rel_expression	: simple_expression

- 2

Line 18: logic_expression : rel_expression

- 2

Line 18: expression : variable ASSIGNOP logic_expression

b = - 2

Line 18: expression_statement 	: expression SEMICOLON

b = - 2;


Line 18: statement : expression_statement

b = - 2;


Line 18: statements : statements statement

a = - 1;
 b = - 2;


Line 19: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 19: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;


Line 20: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 20: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;


Line 22: variable : ID

a

Line 22: factor	: variable INCOP

a ++

Line 22: unary_expression : factor

a ++

Line 22: term :	unary_expression

a ++

Line 22: simple_expression : term

a ++

Line 22: rel_expression	: simple_expression

a ++

Line 22: logic_expression : rel_expression

a ++

Line 22: expression : logic expression

a ++

Line 22: expression_statement 	: expression SEMICOLON

a ++;


Line 22: statement : expression_statement

a ++;


Line 22: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;


Line 23: variable : ID

b

Line 23: factor	: variable INCOP

b ++

Line 23: unary_expression : factor

b ++

Line 23: term :	unary_expression

b ++

Line 23: simple_expression : term

b ++

Line 23: rel_expression	: simple_expression

b ++

Line 23: logic_expression : rel_expression

b ++

Line 23: expression : logic expression

b ++

Line 23: expression_statement 	: expression SEMICOLON

b ++;


Line 23: statement : expression_statement

b ++;


Line 23: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;


Line 24: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 24: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;


Line 25: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 25: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;


Line 26: compound_statement : LCURL statements RCURL

{
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


ScopeTable # 1.2

ScopeTable # 1
7 -->  < a , ID >  
8 -->  < b , ID >  
21 -->  < incop_1 , ID >  
22 -->  < incop_2 , ID >  

Line 26: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void incop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


Line 26: unit : func_definition

void incop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


Line 26: program : program unit

int a ;
 int b ;
 void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void incop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}


incop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_1 ENDP
incop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, - 1
MOV a, AX
MOV AX, 2
MOV AX, - 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_2 ENDP

Line 28: type_specifier	: VOID

void

Line 29: variable : ID

a

Line 29: factor	: CONST_INT

1

Line 29: unary_expression : factor

1

Line 29: term :	unary_expression

1

Line 29: simple_expression : term

1

Line 29: rel_expression	: simple_expression

1

Line 29: logic_expression : rel_expression

1

Line 29: expression : variable ASSIGNOP logic_expression

a = 1

Line 29: expression_statement 	: expression SEMICOLON

a = 1;


Line 29: statement : expression_statement

a = 1;


Line 29: statements : statement

a = 1;


Line 30: variable : ID

b

Line 30: factor	: CONST_INT

2

Line 30: unary_expression : factor

2

Line 30: term :	unary_expression

2

Line 30: simple_expression : term

2

Line 30: rel_expression	: simple_expression

2

Line 30: logic_expression : rel_expression

2

Line 30: expression : variable ASSIGNOP logic_expression

b = 2

Line 30: expression_statement 	: expression SEMICOLON

b = 2;


Line 30: statement : expression_statement

b = 2;


Line 30: statements : statements statement

a = 1;
 b = 2;


Line 31: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 31: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;


Line 32: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 32: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;


Line 34: variable : ID

a

Line 34: factor	: variable DECOP

a --

Line 34: unary_expression : factor

a --

Line 34: term :	unary_expression

a --

Line 34: simple_expression : term

a --

Line 34: rel_expression	: simple_expression

a --

Line 34: logic_expression : rel_expression

a --

Line 34: expression : logic expression

a --

Line 34: expression_statement 	: expression SEMICOLON

a --;


Line 34: statement : expression_statement

a --;


Line 34: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;


Line 35: variable : ID

b

Line 35: factor	: variable DECOP

b --

Line 35: unary_expression : factor

b --

Line 35: term :	unary_expression

b --

Line 35: simple_expression : term

b --

Line 35: rel_expression	: simple_expression

b --

Line 35: logic_expression : rel_expression

b --

Line 35: expression : logic expression

b --

Line 35: expression_statement 	: expression SEMICOLON

b --;


Line 35: statement : expression_statement

b --;


Line 35: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;


Line 36: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 36: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;


Line 37: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 37: statements : statements statement

a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;


Line 38: compound_statement : LCURL statements RCURL

{
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


ScopeTable # 1.3

ScopeTable # 1
7 -->  < a , ID >   < decop_1 , ID >  
8 -->  < b , ID >  
21 -->  < incop_1 , ID >  
22 -->  < incop_2 , ID >  

Line 38: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void decop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


Line 38: unit : func_definition

void decop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


Line 38: program : program unit

int a ;
 int b ;
 void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void incop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void decop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


incop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_1 ENDP
incop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, - 1
MOV a, AX
MOV AX, 2
MOV AX, - 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_2 ENDP
decop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
DEC AX
MOV a, AX
MOV AX, b
DEC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
decop_1 ENDP

Line 40: type_specifier	: VOID

void

Line 41: variable : ID

a

Line 41: factor	: CONST_INT

1

Line 41: unary_expression : factor

1

Line 41: unary_expression : ADDOP unary_expression

- 1

Line 41: term :	unary_expression

- 1

Line 41: simple_expression : term

- 1

Line 41: rel_expression	: simple_expression

- 1

Line 41: logic_expression : rel_expression

- 1

Line 41: expression : variable ASSIGNOP logic_expression

a = - 1

Line 41: expression_statement 	: expression SEMICOLON

a = - 1;


Line 41: statement : expression_statement

a = - 1;


Line 41: statements : statement

a = - 1;


Line 42: variable : ID

b

Line 42: factor	: CONST_INT

2

Line 42: unary_expression : factor

2

Line 42: unary_expression : ADDOP unary_expression

- 2

Line 42: term :	unary_expression

- 2

Line 42: simple_expression : term

- 2

Line 42: rel_expression	: simple_expression

- 2

Line 42: logic_expression : rel_expression

- 2

Line 42: expression : variable ASSIGNOP logic_expression

b = - 2

Line 42: expression_statement 	: expression SEMICOLON

b = - 2;


Line 42: statement : expression_statement

b = - 2;


Line 42: statements : statements statement

a = - 1;
 b = - 2;


Line 43: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 43: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;


Line 44: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 44: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;


Line 46: variable : ID

a

Line 46: factor	: variable DECOP

a --

Line 46: unary_expression : factor

a --

Line 46: term :	unary_expression

a --

Line 46: simple_expression : term

a --

Line 46: rel_expression	: simple_expression

a --

Line 46: logic_expression : rel_expression

a --

Line 46: expression : logic expression

a --

Line 46: expression_statement 	: expression SEMICOLON

a --;


Line 46: statement : expression_statement

a --;


Line 46: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;


Line 47: variable : ID

b

Line 47: factor	: variable DECOP

b --

Line 47: unary_expression : factor

b --

Line 47: term :	unary_expression

b --

Line 47: simple_expression : term

b --

Line 47: rel_expression	: simple_expression

b --

Line 47: logic_expression : rel_expression

b --

Line 47: expression : logic expression

b --

Line 47: expression_statement 	: expression SEMICOLON

b --;


Line 47: statement : expression_statement

b --;


Line 47: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;


Line 48: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 48: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;


Line 49: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 49: statements : statements statement

a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;


Line 50: compound_statement : LCURL statements RCURL

{
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


ScopeTable # 1.4

ScopeTable # 1
7 -->  < a , ID >   < decop_1 , ID >  
8 -->  < b , ID >   < decop_2 , ID >  
21 -->  < incop_1 , ID >  
22 -->  < incop_2 , ID >  

Line 50: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void decop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


Line 50: unit : func_definition

void decop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


Line 50: program : program unit

int a ;
 int b ;
 void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void incop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void decop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}
 void decop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}


incop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_1 ENDP
incop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, - 1
MOV a, AX
MOV AX, 2
MOV AX, - 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_2 ENDP
decop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
DEC AX
MOV a, AX
MOV AX, b
DEC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
decop_1 ENDP
decop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, - 1
MOV a, AX
MOV AX, 2
MOV AX, - 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
DEC AX
MOV a, AX
MOV AX, b
DEC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
decop_2 ENDP

Line 52: type_specifier	: INT

int


Line 53: argument_list : |

 

Line 53: factor	: ID LPAREN argument_list RPAREN

incop_1 (   )

Line 53: unary_expression : factor

incop_1 (   )

Line 53: term :	unary_expression

incop_1 (   )

Line 53: simple_expression : term

incop_1 (   )

Line 53: rel_expression	: simple_expression

incop_1 (   )

Line 53: logic_expression : rel_expression

incop_1 (   )

Line 53: expression : logic expression

incop_1 (   )

Line 53: expression_statement 	: expression SEMICOLON

incop_1 (   );


Line 53: statement : expression_statement

incop_1 (   );


Line 53: statements : statement

incop_1 (   );


Line 54: argument_list : |

 

Line 54: factor	: ID LPAREN argument_list RPAREN

incop_2 (   )

Line 54: unary_expression : factor

incop_2 (   )

Line 54: term :	unary_expression

incop_2 (   )

Line 54: simple_expression : term

incop_2 (   )

Line 54: rel_expression	: simple_expression

incop_2 (   )

Line 54: logic_expression : rel_expression

incop_2 (   )

Line 54: expression : logic expression

incop_2 (   )

Line 54: expression_statement 	: expression SEMICOLON

incop_2 (   );


Line 54: statement : expression_statement

incop_2 (   );


Line 54: statements : statements statement

incop_1 (   );
 incop_2 (   );


Line 55: argument_list : |

 

Line 55: factor	: ID LPAREN argument_list RPAREN

decop_1 (   )

Line 55: unary_expression : factor

decop_1 (   )

Line 55: term :	unary_expression

decop_1 (   )

Line 55: simple_expression : term

decop_1 (   )

Line 55: rel_expression	: simple_expression

decop_1 (   )

Line 55: logic_expression : rel_expression

decop_1 (   )

Line 55: expression : logic expression

decop_1 (   )

Line 55: expression_statement 	: expression SEMICOLON

decop_1 (   );


Line 55: statement : expression_statement

decop_1 (   );


Line 55: statements : statements statement

incop_1 (   );
 incop_2 (   );
 decop_1 (   );


Line 56: argument_list : |

 

Line 56: factor	: ID LPAREN argument_list RPAREN

decop_2 (   )

Line 56: unary_expression : factor

decop_2 (   )

Line 56: term :	unary_expression

decop_2 (   )

Line 56: simple_expression : term

decop_2 (   )

Line 56: rel_expression	: simple_expression

decop_2 (   )

Line 56: logic_expression : rel_expression

decop_2 (   )

Line 56: expression : logic expression

decop_2 (   )

Line 56: expression_statement 	: expression SEMICOLON

decop_2 (   );


Line 56: statement : expression_statement

decop_2 (   );


Line 56: statements : statements statement

incop_1 (   );
 incop_2 (   );
 decop_1 (   );
 decop_2 (   );


Line 57: compound_statement : LCURL statements RCURL

{
incop_1 (   );
 incop_2 (   );
 decop_1 (   );
 decop_2 (   );
}


ScopeTable # 1.5

ScopeTable # 1
1 -->  < main , ID >  
7 -->  < a , ID >   < decop_1 , ID >  
8 -->  < b , ID >   < decop_2 , ID >  
21 -->  < incop_1 , ID >  
22 -->  < incop_2 , ID >  

Line 57: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
incop_1 (   );
 incop_2 (   );
 decop_1 (   );
 decop_2 (   );
}


Line 57: unit : func_definition

int main ( ) {
incop_1 (   );
 incop_2 (   );
 decop_1 (   );
 decop_2 (   );
}


Line 57: program : program unit

int a ;
 int b ;
 void incop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void incop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a ++;
 b ++;
 println ( a ) ;
 println ( b ) ;
}
 void decop_1 ( ) {
a = 1;
 b = 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}
 void decop_2 ( ) {
a = - 1;
 b = - 2;
 println ( a ) ;
 println ( b ) ;
 a --;
 b --;
 println ( a ) ;
 println ( b ) ;
}
 int main ( ) {
incop_1 (   );
 incop_2 (   );
 decop_1 (   );
 decop_2 (   );
}


incop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_1 ENDP
incop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, - 1
MOV a, AX
MOV AX, 2
MOV AX, - 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
INC AX
MOV a, AX
MOV AX, b
INC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
incop_2 ENDP
decop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
DEC AX
MOV a, AX
MOV AX, b
DEC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
decop_1 ENDP
decop_2 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 1
MOV AX, - 1
MOV a, AX
MOV AX, 2
MOV AX, - 2
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
MOV AX, a
DEC AX
MOV a, AX
MOV AX, b
DEC AX
MOV b, AX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
decop_2 ENDP
main PROC
MOV AX, @DATA 
MOV DS, AX
CALL incop_1
CALL incop_2
CALL decop_1
CALL decop_2

MOV AH, 4CH
INT 21H
main ENDP

Line 57: start : program

ScopeTable # 1
1 -->  < main , ID >  
7 -->  < a , ID >   < decop_1 , ID >  
8 -->  < b , ID >   < decop_2 , ID >  
21 -->  < incop_1 , ID >  
22 -->  < incop_2 , ID >  

Total lines: 57
Total errors: 0
