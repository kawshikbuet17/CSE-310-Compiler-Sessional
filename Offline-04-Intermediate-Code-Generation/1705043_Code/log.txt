Line 1: type_specifier	: INT

int


Line 1: declaration_list : ID

a


Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int a ;



Line 1: unit : var_declaration

int a ;



Line 1: program : unit

int a ;



Line 3: type_specifier	: VOID

void

Line 4: variable : ID

a

Line 4: factor	: CONST_INT

10

Line 4: unary_expression : factor

10

Line 4: term :	unary_expression

10

Line 4: simple_expression : term

10

Line 4: rel_expression	: simple_expression

10

Line 4: logic_expression : rel_expression

10

Line 4: expression : variable ASSIGNOP logic_expression

a = 10

Line 4: expression_statement 	: expression SEMICOLON

a = 10;


Line 4: statement : expression_statement

a = 10;


Line 4: statements : statement

a = 10;


Line 5: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 5: statements : statements statement

a = 10;
 println ( a ) ;


Line 6: compound_statement : LCURL statements RCURL

{
a = 10;
 println ( a ) ;
}


ScopeTable # 1.1

ScopeTable # 1
7 -->  < a , ID >  
22 -->  < assignop_1 , ID >  

Line 6: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void assignop_1 ( ) {
a = 10;
 println ( a ) ;
}


Line 6: unit : func_definition

void assignop_1 ( ) {
a = 10;
 println ( a ) ;
}


Line 6: program : program unit

int a ;
 void assignop_1 ( ) {
a = 10;
 println ( a ) ;
}


assignop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 10
MOV a, AX
MOV AX, a
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
assignop_1 ENDP

Line 8: type_specifier	: INT

int


Line 9: argument_list : |

 

Line 9: factor	: ID LPAREN argument_list RPAREN

assignop_1 (   )

Line 9: unary_expression : factor

assignop_1 (   )

Line 9: term :	unary_expression

assignop_1 (   )

Line 9: simple_expression : term

assignop_1 (   )

Line 9: rel_expression	: simple_expression

assignop_1 (   )

Line 9: logic_expression : rel_expression

assignop_1 (   )

Line 9: expression : logic expression

assignop_1 (   )

Line 9: expression_statement 	: expression SEMICOLON

assignop_1 (   );


Line 9: statement : expression_statement

assignop_1 (   );


Line 9: statements : statement

assignop_1 (   );


Line 10: compound_statement : LCURL statements RCURL

{
assignop_1 (   );
}


ScopeTable # 1.2

ScopeTable # 1
1 -->  < main , ID >  
7 -->  < a , ID >  
22 -->  < assignop_1 , ID >  

Line 10: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
assignop_1 (   );
}


Line 10: unit : func_definition

int main ( ) {
assignop_1 (   );
}


Line 10: program : program unit

int a ;
 void assignop_1 ( ) {
a = 10;
 println ( a ) ;
}
 int main ( ) {
assignop_1 (   );
}


assignop_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, 10
MOV a, AX
MOV AX, a
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET
assignop_1 ENDP
main PROC
MOV AX, @DATA 
MOV DS, AX
CALL assignop_1

MOV AH, 4CH
INT 21H
main ENDP

Line 11: start : program

ScopeTable # 1
1 -->  < main , ID >  
7 -->  < a , ID >  
22 -->  < assignop_1 , ID >  

Total lines: 11
Total errors: 0
