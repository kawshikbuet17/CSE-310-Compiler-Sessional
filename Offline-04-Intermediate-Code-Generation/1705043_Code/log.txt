Line 1: type_specifier	: VOID

void

Line 1: type_specifier	: INT

int


Line 1: parameter_list  : type_specifier ID

int a

Line 1: type_specifier	: INT

int


Line 1: parameter_list  : parameter_list COMMA type_specifier ID

int a , int b

Line 2: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( a ) ;


Line 2: statements : statement

println ( a ) ;


Line 3: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println ( b ) ;


Line 3: statements : statements statement

println ( a ) ;
 println ( b ) ;


Line 4: compound_statement : LCURL statements RCURL

{
println ( a ) ;
 println ( b ) ;
}


ScopeTable # 1.1
7 -->  < a , ID >  
8 -->  < b , ID >  

ScopeTable # 1
2 -->  < func_1 , ID >  

Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void func_1 ( int a , int b ) {
println ( a ) ;
 println ( b ) ;
}


Line 4: unit : func_definition

void func_1 ( int a , int b ) {
println ( a ) ;
 println ( b ) ;
}


Line 4: program : unit

void func_1 ( int a , int b ) {
println ( a ) ;
 println ( b ) ;
}


POP AX
MOV b, AX
POP AX
MOV a, AX
func_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET 4
func_1 ENDP

Line 6: type_specifier	: INT

int


Line 7: type_specifier	: INT

int


Line 7: declaration_list : ID

a


Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int a ;



Line 7: statement : var_declaration

int a ;


Line 7: statements : statement

int a ;


Line 8: type_specifier	: INT

int


Line 8: declaration_list : ID

b


Line 8: var_declaration : type_specifier declaration_list SEMICOLON

int b ;



Line 8: statement : var_declaration

int b ;


Line 8: statements : statements statement

int a ;
 int b ;


Line 9: variable : ID

a

Line 9: factor	: CONST_INT

1

Line 9: unary_expression : factor

1

Line 9: term :	unary_expression

1

Line 9: simple_expression : term

1

Line 9: rel_expression	: simple_expression

1

Line 9: logic_expression : rel_expression

1

Line 9: expression : variable ASSIGNOP logic_expression

a = 1

Line 9: expression_statement 	: expression SEMICOLON

a = 1;


Line 9: statement : expression_statement

a = 1;


Line 9: statements : statements statement

int a ;
 int b ;
 a = 1;


Line 10: variable : ID

b

Line 10: factor	: CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term :	unary_expression

2

Line 10: simple_expression : term

2

Line 10: rel_expression	: simple_expression

2

Line 10: logic_expression : rel_expression

2

Line 10: expression : variable ASSIGNOP logic_expression

b = 2

Line 10: expression_statement 	: expression SEMICOLON

b = 2;


Line 10: statement : expression_statement

b = 2;


Line 10: statements : statements statement

int a ;
 int b ;
 a = 1;
 b = 2;


Line 11: variable : ID

a

Line 11: factor	: variable

a

Line 11: unary_expression : factor

a

Line 11: term :	unary_expression

a

Line 11: simple_expression : term

a

Line 11: rel_expression	: simple_expression

a

Line 11: logic_expression : rel_expression

a

Line 11: arguments : logic_expression

a

Line 11: variable : ID

b

Line 11: factor	: variable

b

Line 11: unary_expression : factor

b

Line 11: term :	unary_expression

b

Line 11: simple_expression : term

b

Line 11: rel_expression	: simple_expression

b

Line 11: logic_expression : rel_expression

b

Line 11: arguments : arguments COMMA logic_expression

a , b

Line 11: argument_list : arguments

a , b

Line 11: factor	: ID LPAREN argument_list RPAREN

func_1 ( a , b )

Line 11: unary_expression : factor

func_1 ( a , b )

Line 11: term :	unary_expression

func_1 ( a , b )

Line 11: simple_expression : term

func_1 ( a , b )

Line 11: rel_expression	: simple_expression

func_1 ( a , b )

Line 11: logic_expression : rel_expression

func_1 ( a , b )

Line 11: expression : logic expression

func_1 ( a , b )

Line 11: expression_statement 	: expression SEMICOLON

func_1 ( a , b );


Line 11: statement : expression_statement

func_1 ( a , b );


Line 11: statements : statements statement

int a ;
 int b ;
 a = 1;
 b = 2;
 func_1 ( a , b );


Line 12: compound_statement : LCURL statements RCURL

{
int a ;
 int b ;
 a = 1;
 b = 2;
 func_1 ( a , b );
}


ScopeTable # 1.2
7 -->  < a , ID >  
8 -->  < b , ID >  

ScopeTable # 1
1 -->  < main , ID >  
2 -->  < func_1 , ID >  

Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
int a ;
 int b ;
 a = 1;
 b = 2;
 func_1 ( a , b );
}


Line 12: unit : func_definition

int main ( ) {
int a ;
 int b ;
 a = 1;
 b = 2;
 func_1 ( a , b );
}


Line 12: program : program unit

void func_1 ( int a , int b ) {
println ( a ) ;
 println ( b ) ;
}
 int main ( ) {
int a ;
 int b ;
 a = 1;
 b = 2;
 func_1 ( a , b );
}


POP AX
MOV b, AX
POP AX
MOV a, AX
func_1 PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
MOV AX, a
CALL OUTDEC
MOV AX, b
CALL OUTDEC
POP DX
POP CX
POP BX
POP AX
RET 4
func_1 ENDP
main PROC
MOV AX, @DATA 
MOV DS, AX
MOV AX, 1
MOV AX, 1
MOV a, AX
MOV AX, 2
MOV AX, 2
MOV b, AX
MOV AX, a
PUSH AX
MOV AX, b
PUSH AX
CALL func_1

MOV AH, 4CH
INT 21H
main ENDP

Line 12: start : program

ScopeTable # 1
1 -->  < main , ID >  
2 -->  < func_1 , ID >  

Total lines: 12
Total errors: 0
